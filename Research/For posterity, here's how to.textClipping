bplist00—XUTI-DataŸ	
_public.utf8-plain-text_$com.apple.traditional-mac-plain-text_com.apple.webarchive_com.adobe.indesign-import-styl_com.adobe.indesign-import-ustl[public.htmlZpublic.rtf_public.utf16-plain-text_ public.utf16-external-plain-text_	For posterity, here's how to convert a single midi channnel to wav on android:

#include <jni.h>
#include <string>
#include <fluidsynth.h>
#include <unistd.h>

// default channel to export
int channelToExport = 0;

int handle_midi_event(void* data, fluid_midi_event_t* event)
{
    // successfully handles midi event from player to synthesizer only if midi event is in the exported channel
    return fluid_midi_event_get_channel(event) == channelToExport ? fluid_synth_handle_midi_event(data, event) : FLUID_FAILED;
}

extern "C" JNIEXPORT void JNICALL Java_com_ryzhak_midi2wavconverter_MainActivity_convertMidiToWav(JNIEnv* env, jobject, jstring jSoundfontPath, jstring jOutputWavPath, jstring jMidiPath, jint jChannel) {
    fluid_settings_t* settings;
    fluid_synth_t* synth;
    fluid_player_t* player;
    fluid_file_renderer_t* renderer;

    settings = new_fluid_settings();

    // specify the file to store the audio to
    const char* outputWavPath = env->GetStringUTFChars(jOutputWavPath, nullptr);
    fluid_settings_setstr(settings, "audio.file.name", outputWavPath);

    // since this is a non-realtime scenario, there is no need to pin the sample data
    fluid_settings_setint(settings, "synth.lock-memory", 0);

    synth = new_fluid_synth(settings);

    // Load sample soundfont
    const char* soundfontPath = env->GetStringUTFChars(jSoundfontPath, nullptr);
    fluid_synth_sfload(synth, soundfontPath, 1);

    // create a new player
    const char* midiPath = env->GetStringUTFChars(jMidiPath, nullptr);
    player = new_fluid_player(synth);
    fluid_player_add(player, midiPath);
    fluid_player_play(player);

    // set basic channel to export
    channelToExport = jChannel;
    fluid_player_set_playback_callback(player, handle_midi_event , synth);

    // start conversion
    renderer = new_fluid_file_renderer (synth);
    while (fluid_player_get_status(player) == FLUID_PLAYER_PLAYING)
    {
        if (fluid_file_renderer_process_block(renderer) != FLUID_OK)
        {
            break;
        }
    }

    // just for sure: stop the playback explicitly and wait until finished
    fluid_player_stop(player);
    fluid_player_join(player);

    delete_fluid_file_renderer(renderer);
    delete_fluid_player(player);
    delete_fluid_synth(synth);
    delete_fluid_settings(settings);
}
shareO	For posterity, here's how to convert a single midi channnel to wav on android:#include <jni.h>#include <string>#include <fluidsynth.h>#include <unistd.h>// default channel to exportint channelToExport = 0;int handle_midi_event(void* data, fluid_midi_event_t* event){    // successfully handles midi event from player to synthesizer only if midi event is in the exported channel    return fluid_midi_event_get_channel(event) == channelToExport ? fluid_synth_handle_midi_event(data, event) : FLUID_FAILED;}extern "C" JNIEXPORT void JNICALL Java_com_ryzhak_midi2wavconverter_MainActivity_convertMidiToWav(JNIEnv* env, jobject, jstring jSoundfontPath, jstring jOutputWavPath, jstring jMidiPath, jint jChannel) {    fluid_settings_t* settings;    fluid_synth_t* synth;    fluid_player_t* player;    fluid_file_renderer_t* renderer;    settings = new_fluid_settings();    // specify the file to store the audio to    const char* outputWavPath = env->GetStringUTFChars(jOutputWavPath, nullptr);    fluid_settings_setstr(settings, "audio.file.name", outputWavPath);    // since this is a non-realtime scenario, there is no need to pin the sample data    fluid_settings_setint(settings, "synth.lock-memory", 0);    synth = new_fluid_synth(settings);    // Load sample soundfont    const char* soundfontPath = env->GetStringUTFChars(jSoundfontPath, nullptr);    fluid_synth_sfload(synth, soundfontPath, 1);    // create a new player    const char* midiPath = env->GetStringUTFChars(jMidiPath, nullptr);    player = new_fluid_player(synth);    fluid_player_add(player, midiPath);    fluid_player_play(player);    // set basic channel to export    channelToExport = jChannel;    fluid_player_set_playback_callback(player, handle_midi_event , synth);    // start conversion    renderer = new_fluid_file_renderer (synth);    while (fluid_player_get_status(player) == FLUID_PLAYER_PLAYING)    {        if (fluid_file_renderer_process_block(renderer) != FLUID_OK)        {            break;        }    }    // just for sure: stop the playback explicitly and wait until finished    fluid_player_stop(player);    fluid_player_join(player);    delete_fluid_file_renderer(renderer);    delete_fluid_player(player);    delete_fluid_synth(synth);    delete_fluid_settings(settings);}shareOdsbplist00—_WebMainResource’	
^WebResourceURL_WebResourceFrameName_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName_ghttps://stackoverflow.com/questions/64503636/how-to-export-a-single-midi-channel-to-wav-with-fluidsynthPOc&<!DOCTYPE html><div class="s-prose js-post-body" itemprop="text" style="margin: 0px; padding: 0px; border: 0px; font-family: Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif; font-style: normal; font-variant-caps: normal; font-weight: normal; font-stretch: inherit; line-height: var(--s-prose-line-height); font-size: 15px; vertical-align: baseline; box-sizing: inherit; --s-prose-line-height: 1.5; --s-prose-spacing: 1.1em; --s-prose-spacing-condensed: calc(var(--s-prose-spacing) / 2); word-wrap: break-word; width: 659px; caret-color: rgb(36, 39, 41); color: rgb(36, 39, 41); letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;"><p style="margin: 0px 0px var(--s-prose-spacing); padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 15px; vertical-align: baseline; box-sizing: inherit; clear: both;">For posterity, here's how to convert a single midi channnel to wav on android:</p><pre class="lang-cpp s-code-block hljs" style="margin: 0px; padding: 12px; border: 0px; font-family: Consolas, Menlo, Monaco, &quot;Lucida Console&quot;, &quot;Liberation Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, monospace, sans-serif; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: 1.30769231; font-size: 13px; vertical-align: baseline; box-sizing: inherit; width: auto; max-height: 600px; overflow: auto; background-color: var(--highlight-bg); border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 5px; color: var(--highlight-color); word-wrap: normal;"><code style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; background-color: transparent; white-space: inherit;"><span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;jni.h&gt;</span></span>
<span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;string&gt;</span></span>
<span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;fluidsynth.h&gt;</span></span>
<span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;unistd.h&gt;</span></span>

<span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// default channel to export</span>
<span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">int</span> channelToExport = <span class="hljs-number" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-namespace);">0</span>;

<span class="hljs-function" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;"><span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">int</span> <span class="hljs-title" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">handle_midi_event</span><span class="hljs-params" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;">(<span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">void</span>* data, <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_midi_event_t</span>* event)</span>
</span>{
    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// successfully handles midi event from player to synthesizer only if midi event is in the exported channel</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">return</span> fluid_midi_event_get_channel(event) == channelToExport ? fluid_synth_handle_midi_event(data, event) : FLUID_FAILED;
}

<span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">extern</span> <span class="hljs-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">"C"</span> <span class="hljs-function" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;">JNIEXPORT <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">void</span> JNICALL <span class="hljs-title" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">Java_com_ryzhak_midi2wavconverter_MainActivity_convertMidiToWav</span><span class="hljs-params" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;">(JNIEnv* env, jobject, jstring jSoundfontPath, jstring jOutputWavPath, jstring jMidiPath, jint jChannel)</span> </span>{
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_settings_t</span>* settings;
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_synth_t</span>* synth;
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_player_t</span>* player;
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_file_renderer_t</span>* renderer;

    settings = new_fluid_settings();

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// specify the file to store the audio to</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">const</span> <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">char</span>* outputWavPath = env-&gt;GetStringUTFChars(jOutputWavPath, <span class="hljs-literal" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">nullptr</span>);
    fluid_settings_setstr(settings, <span class="hljs-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">"audio.file.name"</span>, outputWavPath);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// since this is a non-realtime scenario, there is no need to pin the sample data</span>
    fluid_settings_setint(settings, <span class="hljs-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">"synth.lock-memory"</span>, <span class="hljs-number" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-namespace);">0</span>);

    synth = new_fluid_synth(settings);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// Load sample soundfont</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">const</span> <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">char</span>* soundfontPath = env-&gt;GetStringUTFChars(jSoundfontPath, <span class="hljs-literal" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">nullptr</span>);
    fluid_synth_sfload(synth, soundfontPath, <span class="hljs-number" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-namespace);">1</span>);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// create a new player</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">const</span> <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">char</span>* midiPath = env-&gt;GetStringUTFChars(jMidiPath, <span class="hljs-literal" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">nullptr</span>);
    player = new_fluid_player(synth);
    fluid_player_add(player, midiPath);
    fluid_player_play(player);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// set basic channel to export</span>
    channelToExport = jChannel;
    fluid_player_set_playback_callback(player, handle_midi_event , synth);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// start conversion</span>
    renderer = new_fluid_file_renderer (synth);
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">while</span> (fluid_player_get_status(player) == FLUID_PLAYER_PLAYING)
    {
        <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">if</span> (fluid_file_renderer_process_block(renderer) != FLUID_OK)
        {
            <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">break</span>;
        }
    }

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// just for sure: stop the playback explicitly and wait until finished</span>
    fluid_player_stop(player);
    fluid_player_join(player);

    delete_fluid_file_renderer(renderer);
    delete_fluid_player(player);
    delete_fluid_synth(synth);
    delete_fluid_settings(settings);
}
</code></pre></div><div class="mt24" style="margin-top: 24px !important; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; font-family: Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif; font-style: normal; font-variant-caps: normal; font-weight: normal; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; caret-color: rgb(36, 39, 41); color: rgb(36, 39, 41); letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;"><div class="grid fw-wrap ai-start jc-end gs8 gsy" style="margin: -4px 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; flex-wrap: wrap !important; justify-content: flex-end !important; align-items: flex-start !important; display: flex;"><time itemprop="dateCreated" datetime="2020-10-25T23:33:10" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;"></time><div class="grid--cell mr16" style="margin: 4px 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; flex: 1 1 100px;"><div class="post-menu" style="margin: 0px; padding: 2px 0px 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;"><a href="/a/64529886" rel="nofollow" itemprop="url" class="js-share-link js-gps-track" title="short permalink to this answer" data-gps-track="post.click({ item: 2, priv: 0, post_type: 2 })" data-controller="se-share-sheet s-popover" data-se-share-sheet-title="Share a link to this answer" data-se-share-sheet-subtitle="" data-se-share-sheet-post-type="answer" data-se-share-sheet-social="facebook twitter devto" data-se-share-sheet-location="2" data-se-share-sheet-license-url="https%3a%2f%2fcreativecommons.org%2flicenses%2fby-sa%2f4.0%2f" data-se-share-sheet-license-name="CC BY-SA 4.0" data-s-popover-placement="bottom-start" aria-controls="se-share-sheet-1" data-action=" s-popover#toggle se-share-sheet#preventNavigation s-popover:show->se-share-sheet#willShow s-popover:shown->se-share-sheet#didShow" style="margin: 0px; padding: 0px 1px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; text-decoration: none; color: var(--black-400); cursor: pointer; display: inline-block;">share</a></div></div></div></div>Ytext/htmlUUTF-8    ( 7 N ` v î ˛ ˇd)d3                           d9OÇ`        ∏   9Z◊N      ∏   9Z◊O      ˛   ñtBﬁX      ˛   €Cóhß_      ˛   |#}&∏)`      ˛   ñtBﬁi      ˛   €Cóhßq      ˛   |#}&∏)r      ˛   ñtBﬁ{      ˛   €Cóhßâ      ˛   |#}&∏)ä      ˛   ñtBﬁì      ˛   €Cóhßù      ˛   |#}&∏)ü      ˛   ™R[dª      ˛   |#}&∏)º      ˛   ñtBﬁø      ˛   |#}&∏)“      ˛   ßüA”      ˛   |#}&∏)÷      ˛   ñtBﬁŸ      ˛   |#}&∏)⁄      ˛   ßüAÎ      ˛   |#}&∏)Ï      ˛   ñtBﬁ      ˛   |#}&∏)¯      ˛   ñtBﬁ
     ˛   |#}&∏)     ˛   ™R[dÑ     ˛   |#}&∏)â     ˛   ñtBﬁè     ˛   |#}&∏)     ˛   ñtBﬁ     ˛   |#}&∏)     ˛   €Cóhß     ˛   |#}&∏)     ˛   ñtBﬁ      ˛   |#}&∏))     ˛   ßüAh     ˛   |#}&∏)◊     ˛   ñtBﬁÁ     ˛   |#}&∏)˜     ˛   ñtBﬁ     ˛   |#}&∏)     ˛   ñtBﬁ     ˛   |#}&∏)-     ˛   ñtBﬁB     ˛   |#}&∏)y     ˛   ™R[d¢     ˛   |#}&∏)ß     ˛   ñtBﬁ¨     ˛   |#}&∏)≠     ˛   ñtBﬁ±     ˛   |#}&∏)Í     ˛   ßüAÒ     ˛   |#}&∏)     ˛   €Cóhß)     ˛   |#}&∏)@     ˛   ™R[dë     ˛   |#}&∏)∂     ˛   €Cóhß…     ˛   |#}&∏)À     ˛   ßüAÃ     ˛   |#}&∏)¸     ˛   ™R[d     ˛   |#}&∏)     ˛   ñtBﬁ     ˛   |#}&∏)     ˛   ñtBﬁ#     ˛   |#}&∏)\     ˛   ßüAc     ˛   |#}&∏)ì     ˛   ßüAî     ˛   |#}&∏)ú     ˛   ™R[d≤     ˛   |#}&∏)∑     ˛   ñtBﬁº     ˛   |#}&∏)Ω     ˛   ñtBﬁ¡     ˛   |#}&∏)     ˛   ßüA˜     ˛   |#}&∏)l     ˛   ™R[dä     ˛   |#}&∏)˚     ˛   ™R[d     ˛   |#}&∏)C     ˛   ñtBﬁH     ˛   |#}&∏)ë     ˛   ñtBﬁì     ˛   |#}&∏)‰     ˛   ñtBﬁÈ     ˛   |#}&∏)      ˛   ™R[dF     ˛   |#}&∏)	     ∏   9Z◊	     ∏   íq¢z;ÉO<|   |<           `   N             	                  	                  	         	      
   	      
                                                                                                k                  x                !      "      #      $   	   %   ?   &   o   '      (      )      *      +      ,      -      .   7   /   )   0      1      2      3      4   9   5      6   '   7      8      9   Q   :   %   ;      <      =      >   0   ?      @      A      B      C      D   9   E      F   0   G      H      I      J      K      L      M      N   /   O      P   u   Q      R   q   S      T   5   U      V   I   W      X   Q   Y      Z      [   F   \   —   ]      ^      _   `   ∞                         p   dmanh               	  
   A r i a l                 0   T h e   M o n o t y p e   C o r p o r a t i o n              $$&'()  ∞                         p   dmanh               	  
   A r i a l                 0   T h e   M o n o t y p e   C o r p o r a t i o n              $$&'()  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                STyy  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                STyy  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                STyy  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                STyy  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                STyy  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                STyy  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                STyy  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ∑∑TUˇ   ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ˇ UVíí  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                eemnww  ò                         X   dmanP                       Menlo Regular            	     B i t s t r e a m                ./3377  ∞                         p   dmanh               	  
   A r i a l                 0   T h e   M o n o t y p e   C o r p o r a t i o n              $$&'()  ∞                         p   dmanh               	  
   A r i a l                 0   T h e   M o n o t y p e   C o r p o r a t i o n              ÑÑåçîï  Oc0<div class="s-prose js-post-body" itemprop="text" style="margin: 0px; padding: 0px; border: 0px; font-family: Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif; font-style: normal; font-variant-caps: normal; font-weight: normal; font-stretch: inherit; line-height: var(--s-prose-line-height); font-size: 15px; vertical-align: baseline; box-sizing: inherit; --s-prose-line-height: 1.5; --s-prose-spacing: 1.1em; --s-prose-spacing-condensed: calc(var(--s-prose-spacing) / 2); word-wrap: break-word; width: 659px; caret-color: rgb(36, 39, 41); color: rgb(36, 39, 41); letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;"><p style="margin: 0px 0px var(--s-prose-spacing); padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 15px; vertical-align: baseline; box-sizing: inherit; clear: both;">For posterity, here's how to convert a single midi channnel to wav on android:</p><pre class="lang-cpp s-code-block hljs" style="margin: 0px; padding: 12px; border: 0px; font-family: Consolas, Menlo, Monaco, &quot;Lucida Console&quot;, &quot;Liberation Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, monospace, sans-serif; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: 1.30769231; font-size: 13px; vertical-align: baseline; box-sizing: inherit; width: auto; max-height: 600px; overflow: auto; background-color: var(--highlight-bg); border-top-left-radius: 5px; border-top-right-radius: 5px; border-bottom-right-radius: 5px; border-bottom-left-radius: 5px; color: var(--highlight-color); word-wrap: normal;"><code style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; background-color: transparent; white-space: inherit;"><span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;jni.h&gt;</span></span>
<span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;string&gt;</span></span>
<span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;fluidsynth.h&gt;</span></span>
<span class="hljs-meta" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">#<span class="hljs-meta-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">include</span> <span class="hljs-meta-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">&lt;unistd.h&gt;</span></span>

<span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// default channel to export</span>
<span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">int</span> channelToExport = <span class="hljs-number" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-namespace);">0</span>;

<span class="hljs-function" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;"><span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">int</span> <span class="hljs-title" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">handle_midi_event</span><span class="hljs-params" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;">(<span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">void</span>* data, <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_midi_event_t</span>* event)</span>
</span>{
    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// successfully handles midi event from player to synthesizer only if midi event is in the exported channel</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">return</span> fluid_midi_event_get_channel(event) == channelToExport ? fluid_synth_handle_midi_event(data, event) : FLUID_FAILED;
}

<span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">extern</span> <span class="hljs-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">"C"</span> <span class="hljs-function" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;">JNIEXPORT <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">void</span> JNICALL <span class="hljs-title" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">Java_com_ryzhak_midi2wavconverter_MainActivity_convertMidiToWav</span><span class="hljs-params" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;">(JNIEnv* env, jobject, jstring jSoundfontPath, jstring jOutputWavPath, jstring jMidiPath, jint jChannel)</span> </span>{
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_settings_t</span>* settings;
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_synth_t</span>* synth;
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_player_t</span>* player;
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">fluid_file_renderer_t</span>* renderer;

    settings = new_fluid_settings();

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// specify the file to store the audio to</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">const</span> <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">char</span>* outputWavPath = env-&gt;GetStringUTFChars(jOutputWavPath, <span class="hljs-literal" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">nullptr</span>);
    fluid_settings_setstr(settings, <span class="hljs-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">"audio.file.name"</span>, outputWavPath);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// since this is a non-realtime scenario, there is no need to pin the sample data</span>
    fluid_settings_setint(settings, <span class="hljs-string" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);">"synth.lock-memory"</span>, <span class="hljs-number" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-namespace);">0</span>);

    synth = new_fluid_synth(settings);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// Load sample soundfont</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">const</span> <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">char</span>* soundfontPath = env-&gt;GetStringUTFChars(jSoundfontPath, <span class="hljs-literal" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">nullptr</span>);
    fluid_synth_sfload(synth, soundfontPath, <span class="hljs-number" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-namespace);">1</span>);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// create a new player</span>
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">const</span> <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">char</span>* midiPath = env-&gt;GetStringUTFChars(jMidiPath, <span class="hljs-literal" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);">nullptr</span>);
    player = new_fluid_player(synth);
    fluid_player_add(player, midiPath);
    fluid_player_play(player);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// set basic channel to export</span>
    channelToExport = jChannel;
    fluid_player_set_playback_callback(player, handle_midi_event , synth);

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// start conversion</span>
    renderer = new_fluid_file_renderer (synth);
    <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">while</span> (fluid_player_get_status(player) == FLUID_PLAYER_PLAYING)
    {
        <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">if</span> (fluid_file_renderer_process_block(renderer) != FLUID_OK)
        {
            <span class="hljs-keyword" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-keyword);">break</span>;
        }
    }

    <span class="hljs-comment" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-comment);">// just for sure: stop the playback explicitly and wait until finished</span>
    fluid_player_stop(player);
    fluid_player_join(player);

    delete_fluid_file_renderer(renderer);
    delete_fluid_player(player);
    delete_fluid_synth(synth);
    delete_fluid_settings(settings);
}
</code></pre></div><div class="mt24" style="margin-top: 24px !important; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; font-family: Arial, &quot;Helvetica Neue&quot;, Helvetica, sans-serif; font-style: normal; font-variant-caps: normal; font-weight: normal; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; caret-color: rgb(36, 39, 41); color: rgb(36, 39, 41); letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: none;"><div class="grid fw-wrap ai-start jc-end gs8 gsy" style="margin: -4px 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; flex-wrap: wrap !important; justify-content: flex-end !important; align-items: flex-start !important; display: flex;"><time itemprop="dateCreated" datetime="2020-10-25T23:33:10" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;"></time><div class="grid--cell mr16" style="margin: 4px 0px; padding: 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; flex: 1 1 100px;"><div class="post-menu" style="margin: 0px; padding: 2px 0px 0px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit;"><a href="https://stackoverflow.com/a/64529886" rel="nofollow" itemprop="url" class="js-share-link js-gps-track" title="short permalink to this answer" data-gps-track="post.click({ item: 2, priv: 0, post_type: 2 })" data-controller="se-share-sheet s-popover" data-se-share-sheet-title="Share a link to this answer" data-se-share-sheet-subtitle="" data-se-share-sheet-post-type="answer" data-se-share-sheet-social="facebook twitter devto" data-se-share-sheet-location="2" data-se-share-sheet-license-url="https%3a%2f%2fcreativecommons.org%2flicenses%2fby-sa%2f4.0%2f" data-se-share-sheet-license-name="CC BY-SA 4.0" data-s-popover-placement="bottom-start" aria-controls="se-share-sheet-1" data-action=" s-popover#toggle se-share-sheet#preventNavigation s-popover:show->se-share-sheet#willShow s-popover:shown->se-share-sheet#didShow" style="margin: 0px; padding: 0px 1px; border: 0px; font-family: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; text-decoration: none; color: var(--black-400); cursor: pointer; display: inline-block;">share</a></div></div></div></div>_({\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf840
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red9\green66\blue127;
\red244\green244\blue244;\red68\green104\blue13;\red35\green38\blue42;\red82\green91\blue100;\red166\green65\blue5;
\red113\green122\blue131;}
{\*\expandedcolortbl;;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c392\c33725\c57255;
\cssrgb\c96471\c96471\c96471;\cssrgb\c32941\c47451\c5098;\cssrgb\c18431\c20000\c21569;\cssrgb\c39608\c43137\c46667;\cssrgb\c71765\c33333\c392;
\cssrgb\c51765\c55294\c58431;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For posterity, here's how to convert a single midi channnel to wav on android:\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf4 \cb5 \strokec4 #include \cf6 \strokec6 <jni.h>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <string>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <fluidsynth.h>\cf7 \strokec7 \
\cf4 \strokec4 #include \cf6 \strokec6 <unistd.h>\cf7 \strokec7 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \strokec8 // default channel to export\cf7 \strokec7 \
\pard\pardeftab720\partightenfactor0
\cf4 \strokec4 int\cf7 \strokec7  channelToExport = \cf9 \strokec9 0\cf7 \strokec7 ;\
\
\cf4 \strokec4 int\cf7 \strokec7  \cf9 \strokec9 handle_midi_event\cf7 \strokec7 (\cf4 \strokec4 void\cf7 \strokec7 * data, \cf4 \strokec4 fluid_midi_event_t\cf7 \strokec7 * event)\
\{\
    \cf8 \strokec8 // successfully handles midi event from player to synthesizer only if midi event is in the exported channel\cf7 \strokec7 \
    \cf4 \strokec4 return\cf7 \strokec7  fluid_midi_event_get_channel(event) == channelToExport ? fluid_synth_handle_midi_event(data, event) : FLUID_FAILED;\
\}\
\
\cf4 \strokec4 extern\cf7 \strokec7  \cf6 \strokec6 "C"\cf7 \strokec7  JNIEXPORT \cf4 \strokec4 void\cf7 \strokec7  JNICALL \cf9 \strokec9 Java_com_ryzhak_midi2wavconverter_MainActivity_convertMidiToWav\cf7 \strokec7 (JNIEnv* env, jobject, jstring jSoundfontPath, jstring jOutputWavPath, jstring jMidiPath, jint jChannel) \{\
    \cf4 \strokec4 fluid_settings_t\cf7 \strokec7 * settings;\
    \cf4 \strokec4 fluid_synth_t\cf7 \strokec7 * synth;\
    \cf4 \strokec4 fluid_player_t\cf7 \strokec7 * player;\
    \cf4 \strokec4 fluid_file_renderer_t\cf7 \strokec7 * renderer;\
\
    settings = new_fluid_settings();\
\
    \cf8 \strokec8 // specify the file to store the audio to\cf7 \strokec7 \
    \cf4 \strokec4 const\cf7 \strokec7  \cf4 \strokec4 char\cf7 \strokec7 * outputWavPath = env->GetStringUTFChars(jOutputWavPath, \cf9 \strokec9 nullptr\cf7 \strokec7 );\
    fluid_settings_setstr(settings, \cf6 \strokec6 "audio.file.name"\cf7 \strokec7 , outputWavPath);\
\
    \cf8 \strokec8 // since this is a non-realtime scenario, there is no need to pin the sample data\cf7 \strokec7 \
    fluid_settings_setint(settings, \cf6 \strokec6 "synth.lock-memory"\cf7 \strokec7 , \cf9 \strokec9 0\cf7 \strokec7 );\
\
    synth = new_fluid_synth(settings);\
\
    \cf8 \strokec8 // Load sample soundfont\cf7 \strokec7 \
    \cf4 \strokec4 const\cf7 \strokec7  \cf4 \strokec4 char\cf7 \strokec7 * soundfontPath = env->GetStringUTFChars(jSoundfontPath, \cf9 \strokec9 nullptr\cf7 \strokec7 );\
    fluid_synth_sfload(synth, soundfontPath, \cf9 \strokec9 1\cf7 \strokec7 );\
\
    \cf8 \strokec8 // create a new player\cf7 \strokec7 \
    \cf4 \strokec4 const\cf7 \strokec7  \cf4 \strokec4 char\cf7 \strokec7 * midiPath = env->GetStringUTFChars(jMidiPath, \cf9 \strokec9 nullptr\cf7 \strokec7 );\
    player = new_fluid_player(synth);\
    fluid_player_add(player, midiPath);\
    fluid_player_play(player);\
\
    \cf8 \strokec8 // set basic channel to export\cf7 \strokec7 \
    channelToExport = jChannel;\
    fluid_player_set_playback_callback(player, handle_midi_event , synth);\
\
    \cf8 \strokec8 // start conversion\cf7 \strokec7 \
    renderer = new_fluid_file_renderer (synth);\
    \cf4 \strokec4 while\cf7 \strokec7  (fluid_player_get_status(player) == FLUID_PLAYER_PLAYING)\
    \{\
        \cf4 \strokec4 if\cf7 \strokec7  (fluid_file_renderer_process_block(renderer) != FLUID_OK)\
        \{\
            \cf4 \strokec4 break\cf7 \strokec7 ;\
        \}\
    \}\
\
    \cf8 \strokec8 // just for sure: stop the playback explicitly and wait until finished\cf7 \strokec7 \
    fluid_player_stop(player);\
    fluid_player_join(player);\
\
    delete_fluid_file_renderer(renderer);\
    delete_fluid_player(player);\
    delete_fluid_synth(synth);\
    delete_fluid_settings(settings);\
\}\
\pard\pardeftab720\partightenfactor0

\f0 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/a/64529886"}}{\fldrslt \cf10 \cb3 \strokec10 share}}}O:F o r   p o s t e r i t y ,   h e r e ' s   h o w   t o   c o n v e r t   a   s i n g l e   m i d i   c h a n n n e l   t o   w a v   o n   a n d r o i d :   # i n c l u d e   < j n i . h >  # i n c l u d e   < s t r i n g >  # i n c l u d e   < f l u i d s y n t h . h >  # i n c l u d e   < u n i s t d . h >   / /   d e f a u l t   c h a n n e l   t o   e x p o r t  i n t   c h a n n e l T o E x p o r t   =   0 ;   i n t   h a n d l e _ m i d i _ e v e n t ( v o i d *   d a t a ,   f l u i d _ m i d i _ e v e n t _ t *   e v e n t )  {          / /   s u c c e s s f u l l y   h a n d l e s   m i d i   e v e n t   f r o m   p l a y e r   t o   s y n t h e s i z e r   o n l y   i f   m i d i   e v e n t   i s   i n   t h e   e x p o r t e d   c h a n n e l          r e t u r n   f l u i d _ m i d i _ e v e n t _ g e t _ c h a n n e l ( e v e n t )   = =   c h a n n e l T o E x p o r t   ?   f l u i d _ s y n t h _ h a n d l e _ m i d i _ e v e n t ( d a t a ,   e v e n t )   :   F L U I D _ F A I L E D ;  }   e x t e r n   " C "   J N I E X P O R T   v o i d   J N I C A L L   J a v a _ c o m _ r y z h a k _ m i d i 2 w a v c o n v e r t e r _ M a i n A c t i v i t y _ c o n v e r t M i d i T o W a v ( J N I E n v *   e n v ,   j o b j e c t ,   j s t r i n g   j S o u n d f o n t P a t h ,   j s t r i n g   j O u t p u t W a v P a t h ,   j s t r i n g   j M i d i P a t h ,   j i n t   j C h a n n e l )   {          f l u i d _ s e t t i n g s _ t *   s e t t i n g s ;          f l u i d _ s y n t h _ t *   s y n t h ;          f l u i d _ p l a y e r _ t *   p l a y e r ;          f l u i d _ f i l e _ r e n d e r e r _ t *   r e n d e r e r ;           s e t t i n g s   =   n e w _ f l u i d _ s e t t i n g s ( ) ;           / /   s p e c i f y   t h e   f i l e   t o   s t o r e   t h e   a u d i o   t o          c o n s t   c h a r *   o u t p u t W a v P a t h   =   e n v - > G e t S t r i n g U T F C h a r s ( j O u t p u t W a v P a t h ,   n u l l p t r ) ;          f l u i d _ s e t t i n g s _ s e t s t r ( s e t t i n g s ,   " a u d i o . f i l e . n a m e " ,   o u t p u t W a v P a t h ) ;           / /   s i n c e   t h i s   i s   a   n o n - r e a l t i m e   s c e n a r i o ,   t h e r e   i s   n o   n e e d   t o   p i n   t h e   s a m p l e   d a t a          f l u i d _ s e t t i n g s _ s e t i n t ( s e t t i n g s ,   " s y n t h . l o c k - m e m o r y " ,   0 ) ;           s y n t h   =   n e w _ f l u i d _ s y n t h ( s e t t i n g s ) ;           / /   L o a d   s a m p l e   s o u n d f o n t          c o n s t   c h a r *   s o u n d f o n t P a t h   =   e n v - > G e t S t r i n g U T F C h a r s ( j S o u n d f o n t P a t h ,   n u l l p t r ) ;          f l u i d _ s y n t h _ s f l o a d ( s y n t h ,   s o u n d f o n t P a t h ,   1 ) ;           / /   c r e a t e   a   n e w   p l a y e r          c o n s t   c h a r *   m i d i P a t h   =   e n v - > G e t S t r i n g U T F C h a r s ( j M i d i P a t h ,   n u l l p t r ) ;          p l a y e r   =   n e w _ f l u i d _ p l a y e r ( s y n t h ) ;          f l u i d _ p l a y e r _ a d d ( p l a y e r ,   m i d i P a t h ) ;          f l u i d _ p l a y e r _ p l a y ( p l a y e r ) ;           / /   s e t   b a s i c   c h a n n e l   t o   e x p o r t          c h a n n e l T o E x p o r t   =   j C h a n n e l ;          f l u i d _ p l a y e r _ s e t _ p l a y b a c k _ c a l l b a c k ( p l a y e r ,   h a n d l e _ m i d i _ e v e n t   ,   s y n t h ) ;           / /   s t a r t   c o n v e r s i o n          r e n d e r e r   =   n e w _ f l u i d _ f i l e _ r e n d e r e r   ( s y n t h ) ;          w h i l e   ( f l u i d _ p l a y e r _ g e t _ s t a t u s ( p l a y e r )   = =   F L U I D _ P L A Y E R _ P L A Y I N G )          {                  i f   ( f l u i d _ f i l e _ r e n d e r e r _ p r o c e s s _ b l o c k ( r e n d e r e r )   ! =   F L U I D _ O K )                  {                          b r e a k ;                  }          }           / /   j u s t   f o r   s u r e :   s t o p   t h e   p l a y b a c k   e x p l i c i t l y   a n d   w a i t   u n t i l   f i n i s h e d          f l u i d _ p l a y e r _ s t o p ( p l a y e r ) ;          f l u i d _ p l a y e r _ j o i n ( p l a y e r ) ;           d e l e t e _ f l u i d _ f i l e _ r e n d e r e r ( r e n d e r e r ) ;          d e l e t e _ f l u i d _ p l a y e r ( p l a y e r ) ;          d e l e t e _ f l u i d _ s y n t h ( s y n t h ) ;          d e l e t e _ f l u i d _ s e t t i n g s ( s e t t i n g s ) ;  }  s h a r e O<ˇ˛F o r   p o s t e r i t y ,   h e r e ' s   h o w   t o   c o n v e r t   a   s i n g l e   m i d i   c h a n n n e l   t o   w a v   o n   a n d r o i d :  # i n c l u d e   < j n i . h >  # i n c l u d e   < s t r i n g >  # i n c l u d e   < f l u i d s y n t h . h >  # i n c l u d e   < u n i s t d . h >   / /   d e f a u l t   c h a n n e l   t o   e x p o r t  i n t   c h a n n e l T o E x p o r t   =   0 ;   i n t   h a n d l e _ m i d i _ e v e n t ( v o i d *   d a t a ,   f l u i d _ m i d i _ e v e n t _ t *   e v e n t )  {          / /   s u c c e s s f u l l y   h a n d l e s   m i d i   e v e n t   f r o m   p l a y e r   t o   s y n t h e s i z e r   o n l y   i f   m i d i   e v e n t   i s   i n   t h e   e x p o r t e d   c h a n n e l          r e t u r n   f l u i d _ m i d i _ e v e n t _ g e t _ c h a n n e l ( e v e n t )   = =   c h a n n e l T o E x p o r t   ?   f l u i d _ s y n t h _ h a n d l e _ m i d i _ e v e n t ( d a t a ,   e v e n t )   :   F L U I D _ F A I L E D ;  }   e x t e r n   " C "   J N I E X P O R T   v o i d   J N I C A L L   J a v a _ c o m _ r y z h a k _ m i d i 2 w a v c o n v e r t e r _ M a i n A c t i v i t y _ c o n v e r t M i d i T o W a v ( J N I E n v *   e n v ,   j o b j e c t ,   j s t r i n g   j S o u n d f o n t P a t h ,   j s t r i n g   j O u t p u t W a v P a t h ,   j s t r i n g   j M i d i P a t h ,   j i n t   j C h a n n e l )   {          f l u i d _ s e t t i n g s _ t *   s e t t i n g s ;          f l u i d _ s y n t h _ t *   s y n t h ;          f l u i d _ p l a y e r _ t *   p l a y e r ;          f l u i d _ f i l e _ r e n d e r e r _ t *   r e n d e r e r ;           s e t t i n g s   =   n e w _ f l u i d _ s e t t i n g s ( ) ;           / /   s p e c i f y   t h e   f i l e   t o   s t o r e   t h e   a u d i o   t o          c o n s t   c h a r *   o u t p u t W a v P a t h   =   e n v - > G e t S t r i n g U T F C h a r s ( j O u t p u t W a v P a t h ,   n u l l p t r ) ;          f l u i d _ s e t t i n g s _ s e t s t r ( s e t t i n g s ,   " a u d i o . f i l e . n a m e " ,   o u t p u t W a v P a t h ) ;           / /   s i n c e   t h i s   i s   a   n o n - r e a l t i m e   s c e n a r i o ,   t h e r e   i s   n o   n e e d   t o   p i n   t h e   s a m p l e   d a t a          f l u i d _ s e t t i n g s _ s e t i n t ( s e t t i n g s ,   " s y n t h . l o c k - m e m o r y " ,   0 ) ;           s y n t h   =   n e w _ f l u i d _ s y n t h ( s e t t i n g s ) ;           / /   L o a d   s a m p l e   s o u n d f o n t          c o n s t   c h a r *   s o u n d f o n t P a t h   =   e n v - > G e t S t r i n g U T F C h a r s ( j S o u n d f o n t P a t h ,   n u l l p t r ) ;          f l u i d _ s y n t h _ s f l o a d ( s y n t h ,   s o u n d f o n t P a t h ,   1 ) ;           / /   c r e a t e   a   n e w   p l a y e r          c o n s t   c h a r *   m i d i P a t h   =   e n v - > G e t S t r i n g U T F C h a r s ( j M i d i P a t h ,   n u l l p t r ) ;          p l a y e r   =   n e w _ f l u i d _ p l a y e r ( s y n t h ) ;          f l u i d _ p l a y e r _ a d d ( p l a y e r ,   m i d i P a t h ) ;          f l u i d _ p l a y e r _ p l a y ( p l a y e r ) ;           / /   s e t   b a s i c   c h a n n e l   t o   e x p o r t          c h a n n e l T o E x p o r t   =   j C h a n n e l ;          f l u i d _ p l a y e r _ s e t _ p l a y b a c k _ c a l l b a c k ( p l a y e r ,   h a n d l e _ m i d i _ e v e n t   ,   s y n t h ) ;           / /   s t a r t   c o n v e r s i o n          r e n d e r e r   =   n e w _ f l u i d _ f i l e _ r e n d e r e r   ( s y n t h ) ;          w h i l e   ( f l u i d _ p l a y e r _ g e t _ s t a t u s ( p l a y e r )   = =   F L U I D _ P L A Y E R _ P L A Y I N G )          {                  i f   ( f l u i d _ f i l e _ r e n d e r e r _ p r o c e s s _ b l o c k ( r e n d e r e r )   ! =   F L U I D _ O K )                  {                          b r e a k ;                  }          }           / /   j u s t   f o r   s u r e :   s t o p   t h e   p l a y b a c k   e x p l i c i t l y   a n d   w a i t   u n t i l   f i n i s h e d          f l u i d _ p l a y e r _ s t o p ( p l a y e r ) ;          f l u i d _ p l a y e r _ j o i n ( p l a y e r ) ;           d e l e t e _ f l u i d _ f i l e _ r e n d e r e r ( r e n d e r e r ) ;          d e l e t e _ f l u i d _ p l a y e r ( p l a y e r ) ;          d e l e t e _ f l u i d _ s y n t h ( s y n t h ) ;          d e l e t e _ f l u i d _ s e t t i n g s ( s e t t i n g s ) ;  }   s h a r e             '   @   g   ~   ü   ¿   Ã   ◊   Ò    
5  V  wÕ  S  ª”  23 Dq                          V±