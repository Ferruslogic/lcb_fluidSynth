 library com.ferruslogic.library.fluidsynth

metadata version is "0.5"
metadata author is "FerrusLogic, Paul McClernan"
metadata title is "LC FluidSynth"

use com.livecode.foreign
use com.livecode.canvas
use com.livecode.string
use com.livecode.char
use com.livecode.array
use com.livecode.list
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.widgetutils
use com.livecode.system

private type fs_SETTINGS is Pointer
private type fs_SYNTH is Pointer
private type fs_AUIDIOdrvr is Pointer
private type fs_PLAYER is Pointer
private type fs_SOUNDFONT is Pointer

private type fs_MIDIROUTER is Pointer
private type fs_MIDIROUTER_rule is Pointer
private type fs_MIDIdrvr is Pointer
private type fs_MIDIEvent is Pointer

constant kFLUID_OK is 0
constant kFLUID_FAILED is -1

private variable mInited as Boolean
private variable mSettings as optional fs_SETTINGS
private variable mSynth as optional fs_SYNTH
private variable mAudioDriver	as optional fs_AUIDIOdrvr
private variable mPlayer as optional fs_PLAYER
private variable mSelectedSoundFont	as optional fs_SOUNDFONT
private variable mSoundFont as optional fs_SOUNDFONT
private variable mMIDIDriver as optional fs_MIDIdrvr

__safe foreign handler new_fluid_settings() returns fs_SETTINGS binds to "c:libfluidsynth>new_fluid_settings"
__safe foreign handler fluid_settings_setnum(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, in pNumber as CDouble) returns CInt binds to "c:libfluidsynth>fluid_settings_setnum"
__safe foreign handler fluid_settings_getnum(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, out rNumber as CDouble) returns CInt binds to "c:libfluidsynth>fluid_settings_getnum"
__safe foreign handler fluid_settings_setstr(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, in pSettingString as ZStringNative) returns Cbool binds to "c:libfluidsynth>fluid_settings_setstr"
__safe foreign handler fluid_settings_getstr(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, out rSettingString as ZStringNative) returns CBool binds to "c:libfluidsynth>fluid_settings_getstr"
__safe foreign handler fluid_is_midifile(in pFilename as ZStringNative ) returns CBool binds to "c:libfluidsynth>fluid_is_midifile"
__safe foreign handler fluid_is_soundfont(in pFilename as ZStringNative ) returns CBool binds to "c:libfluidsynth>fluid_is_soundfont"
-- __safe foreign handler fluid_version_str() returns optional Pointer binds to "c:libfluidsynth>fluid_version_str"
__safe foreign handler fluid_version(out rMaj as CInt, out rMin as CInt, out rMicr as CInt) returns nothing binds to "c:libfluidsynth>fluid_version"
__safe foreign handler new_fluid_audio_driver(in pSettings as fs_SETTINGS,in pSynth as fs_SYNTH ) \
																			returns optional fs_AUIDIOdrvr binds to "c:libfluidsynth>new_fluid_audio_driver"
__safe foreign handler delete_fluid_audio_driver(in pDriver as fs_AUIDIOdrvr ) returns nothing binds to "c:libfluidsynth>delete_fluid_audio_driver"
__safe foreign handler new_fluid_synth(in pSettings as fs_SETTINGS) returns optional fs_SYNTH binds to "c:libfluidsynth>new_fluid_synth"
__safe foreign handler delete_fluid_synth(in pSynth as fs_SYNTH) returns CBool binds to "c:libfluidsynth>delete_fluid_synth"
__safe foreign handler new_fluid_player(in pSynth as fs_SYNTH ) returns optional fs_PLAYER binds to "c:libfluidsynth>new_fluid_player"
__safe foreign handler delete_fluid_player(in pPlayer as fs_PLAYER) returns CBool binds to "c:libfluidsynth>delete_fluid_player"

__safe foreign handler fluid_synth_sfload(in pSynth as fs_SYNTH,in pFilename as ZStringNative,in pResetPresets as CBool) returns CSInt binds to "c:libfluidsynth>fluid_synth_sfload"
__safe foreign handler fluid_synth_add_sfont(in pSynth as fs_SYNTH,in pSoudFont as fs_SOUNDFONT ) returns CInt binds to "c:libfluidsynth>fluid_synth_add_sfont"
__safe foreign handler fluid_synth_remove_sfont(in pSynth as fs_SYNTH,in pSoudFont as fs_SOUNDFONT ) returns CInt binds to "c:libfluidsynth>fluid_synth_remove_sfont"
__safe foreign handler fluid_synth_sfunload(in pSynth as fs_SYNTH,in pSoudFont as fs_SOUNDFONT, in pParam as CInt) returns CInt binds to "c:libfluidsynth>fluid_synth_sfunload"

__safe foreign handler fluid_synth_get_sfont(in pSynth as fs_SYNTH,in pSFontIndexNum as CInt) returns optional fs_SOUNDFONT binds to "c:libfluidsynth>fluid_synth_get_sfont" -- Index is 0 to _sfcount -1
__safe foreign handler fluid_synth_get_sfont_by_id(in pSynth as fs_SYNTH,in pSFontID as CInt) returns optional fs_SOUNDFONT binds to "c:libfluidsynth>fluid_synth_get_sfont_by_id"
foreign handler fluid_sfont_get_name(in pSoundFont as fs_SOUNDFONT) returns optional ZStringNative binds to "c:libfluidsynth>fluid_sfont_get_name"
__safe foreign handler fluid_synth_sfcount(in pSynth as fs_SYNTH ) returns CInt binds to "c:libfluidsynth>fluid_synth_sfcount"

__safe foreign handler fluid_synth_system_reset(in pSynth as fs_SYNTH) returns CBool binds to "c:libfluidsynth>fluid_synth_system_reset"
__safe foreign handler fluid_synth_noteon(in pSynth as fs_SYNTH,in pChan as CInt,in pKey as CInt, in pVel as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteon"
__safe foreign handler fluid_synth_noteoff(in pSynth as fs_SYNTH,in pChan as CInt,in pKey as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteoff"
__safe foreign handler fluid_synth_pitch_bend(in pSynth as fs_SYNTH,in pChan as CInt,in pBend as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_pitch_bend" -- bend 0-16383, 8192 as center
__safe foreign handler fluid_synth_cc(in pSynth as fs_SYNTH,in pChan as CInt,in pControllerNum as CInt, in pCCValue as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_cc"
__safe foreign handler fluid_synth_get_cc(in pSynth as fs_SYNTH,in pChan as CInt,in pControllerNum as CInt, out rCCValue as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_get_cc"
__safe foreign handler fluid_synth_program_change(in pSynth as fs_SYNTH,in pChan as CInt,in pProgram as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_program_change"
__safe foreign handler fluid_synth_bank_select(in pSynth as fs_SYNTH,in pChan as CInt,in pBankNum as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_bank_select"

__safe foreign handler fluid_player_add(in pPlayer as fs_PLAYER,in pFilename as ZStringNative) returns CInt binds to "c:libfluidsynth>fluid_player_add"
__safe foreign handler fluid_player_play(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_play"
__safe foreign handler fluid_player_stop(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_stop"
-- pLoop = 	Times left to loop the playlist. -1 means loop infinitely.
__safe foreign handler fluid_player_set_loop(in pPlayer as fs_PLAYER,in pLoop as CInt) returns CInt binds to "c:libfluidsynth>fluid_player_set_loop"
__safe foreign handler fluid_player_set_bpm(in pPlayer as fs_PLAYER,in pBPM as CInt) returns CInt binds to "c:libfluidsynth>fluid_player_set_bpm"
__safe foreign handler fluid_player_get_bpm(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_bpm"
-- per MIDI file spec so 500000 = 120 BPM
__safe foreign handler fluid_player_set_midi_tempo(in pPlayer as fs_PLAYER,in pMicroSecsPerQrtrNote as CInt) returns CInt binds to "c:libfluidsynth>fluid_player_set_midi_tempo" -- per MIDI file spec so 500000 = 120 BPM
__safe foreign handler fluid_player_get_midi_tempo(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_midi_tempo" -- per MIDI file spec so 500000 = 120 BPM
__safe foreign handler fluid_player_get_status(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_status"
__safe foreign handler fluid_player_get_current_tick(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_current_tick"
__safe foreign handler fluid_player_get_total_ticks(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_total_ticks"

-- http://www.fluidsynth.org/api-1.x/index.html#RealtimeMIDI

__safe foreign handler new_fluid_midi_router(in pSettings as fs_SETTINGS, in pHandler as any, in pHandlerData as optional any)\
 																			returns optional fs_MIDIROUTER binds to "c:libfluidsynth>new_fluid_midi_router"
__safe foreign handler delete_fluid_midi_router(in pPlayer as fs_MIDIROUTER) returns CBool binds to "c:libfluidsynth>delete_fluid_midi_router"
__safe foreign handler new_fluid_midi_router_rule() returns fs_MIDIROUTER_rule binds to "c:libfluidsynth>new_fluid_midi_router_rule"
__safe foreign handler delete_fluid_midi_router_rule(in pRouterRule as fs_MIDIROUTER_rule) returns CBool binds to "c:libfluidsynth>new_fluid_midi_router_rule"


public foreign handler type handle_midi_event_func_t( in pOptionalDataPtr as optional Pointer, in mMIDIBufferPtr as Pointer) returns CInt

__safe foreign handler new_fluid_midi_driver(in pSettings as fs_SETTINGS, in pHandler as handle_midi_event_func_t, in pOptionalDataPtr as optional Pointer) \
																	returns optional fs_MIDIdrvr binds to "c:libfluidsynth>new_fluid_midi_driver"
__safe foreign handler delete_fluid_midi_driver(in pPlayer as fs_MIDIdrvr) returns CBool binds to "c:libfluidsynth>delete_fluid_midi_driver"
__safe foreign handler fluid_midi_event_get_type(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_type"
__safe foreign handler fluid_midi_event_get_channel(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_channel"
__safe foreign handler fluid_midi_event_get_key(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_key"
__safe foreign handler fluid_midi_event_get_velocity(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_velocity"
__safe foreign handler delete_fluid_midi_event(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>delete_fluid_midi_event"

-- FLUIDSYNTH_API int 	fluid_player_set_playback_callback (fluid_player_t *player, handle_midi_event_func_t handler, void *handler_data) Change the MIDI callback function. More...
-- FLUIDSYNTH_API int 	fluid_player_seek (fluid_player_t *player, int ticks) Seek in the currently playing file. More...


constant kMCStringEncodingUTF8 is 4
__safe foreign handler MCStringEncode(in pString as String, in pEncoding as CUInt, in pIsExternalRep as CBool, out rUTF8String as Data) returns CBool binds to "<builtin>"
--foreign handler MCStringCreateWithCString(in pString as Pointer, out rString as String) returns CBool binds to "<builtin>"
--foreign handler MCStringCreateWithBytes(in pBytes as Pointer, in pByteCount as LCUInt, in pEncoding as CUInt, in pIsExternalRep as CBool, out rString as String) returns CBool binds to "<builtin>"
--foreign handler MCDataConvertStringToData(in pString as String, out rData as Data) returns CBool binds to "<builtin>"
__safe foreign handler MCDataGetBytePtr(in pData as Data) returns optional Pointer binds to "<builtin>"
__safe foreign handler MCMemoryAllocate(in pSize as UIntSize, out rBlockPtr as Pointer) returns CBool binds to "<builtin>"
-- allocates a block of size pSize bytes, places the pointer into rBlockPtr and returns true - or just returns false if it fails
-- MCMemoryReallocate(T *p_block, size_t p_new_size, T*& r_new_block)
__safe foreign handler MCMemoryReallocate(in rBlockPtr as Pointer, in pSize as UIntSize, out rReAllocBlockPtr as Pointer) returns CBool binds to "<builtin>"
__safe foreign handler MCMemoryDeallocate(in rBlockPtr as Pointer) returns nothing binds to "<builtin>"
__safe foreign handler MCWidgetGetMyScriptObject(out rObject as ScriptObject) returns nothing binds to "<builtin>"

private handler fsPostMIDIinput(in tMsgType as Integer, in pChan as Integer, pNoteNum as Integer, pVelocity as optional Integer) returns nothing
   -- variable tScriptObj as ScriptObject
	-- MCWidgetGetMyScriptObject(tScriptObj)
	-- log tScriptObj
	-- get the target -- not allowed in Library modules
	-- log the result
	if tMsgType = 144 then
		if mScriptObject exists then
			post "MIDINoteOn" to mScriptObject with [ pChan , pNoteNum , pVelocity ]
			-- send "MIDINoteOn" to mScriptObject with [ pChan , pNoteNum , pVelocity ]
			-- execute script "get MIDINoteOn(param(1),param(2),param(3)) " of mScriptObject with [ pChan, pNoteNum, pVelocity]
			-- execute script ("MIDINoteOn("& pChan &","& pNoteNum  &","& pVelocity &")") in mScriptObject
			-- log the message was handled
			-- log the result
			return
		end if
	else if tMsgType = 128 then
		if mScriptObject exists then
			post "MIDINoteOff" to mScriptObject with [ pChan , pNoteNum ]
			-- send "MIDINoteOff" to mScriptObject with [ pChan , pNoteNum ]
			-- execute script ("MIDINoteOff("& pChan &","& pNoteNum & ")") in mScriptObject
			-- log the message was handled
			-- log the result
			return
		end if
	else if tMsgType = 224 then
		-- post "MIDIPitchBend" with [ tChan , tNoteNum , tVelocity ]
		post "MIDIPitchBend" to mScriptObject with [ pChan , pNoteNum , pVelocity ]
		return
	else if tMsgType = 176 then
		-- post "MIDIController" with [ tChan , tNoteNum , tVelocity ]
		post "MIDIController" to mScriptObject with [ pChan , pNoteNum , pVelocity ]
		return
	end if
	-- log the system error message
	-- com.livecode.system
	-- log the result
	return
end handler

public handler fsSetMIDIInTargetScriptObj(in pTargetScriptObj as optional String ) returns optional any
	if pTargetScriptObj is not nothing then
		log pTargetScriptObj
		resolve script object pTargetScriptObj
		put the result into mScriptObject
	--	else
	--		resolve script object "this stack"
	--		put the result into mScriptObject
	end if
end handler

private handler fsHandleMIDIinput(in pMyDataPtr as optional Pointer, in mMIDIBufferPtr as Pointer ) returns CInt
	-- log [pMIDIEvent]
	variable tChan as Integer
	variable tMsgType as Integer
	variable tNoteNum as Integer
	variable tVelocity as Integer
	-- resolve script object "this stack"
	-- put the result into mScriptObject
	-- variable tMIDIBufferPtr as Pointer
	put fluid_midi_event_get_type(mMIDIBufferPtr) into tMsgType
	put fluid_midi_event_get_channel(mMIDIBufferPtr) into tChan
   put fluid_midi_event_get_key(mMIDIBufferPtr) into tNoteNum
	put fluid_midi_event_get_velocity(mMIDIBufferPtr) into tVelocity

	-- log [tMsgType] -- ,tChan,tNoteNum,tVelocity]
	if tMsgType = 144 then
		fsPostMIDIinput(tMsgType,tChan,tNoteNum,tVelocity)
		-- fluid_synth_noteon(mSynth,tChan,tNoteNum,tVelocity)
		-- post "MIDINoteOn" with [ tChan , tNoteNum , tVelocity ]
		--post "MIDINoteOn" to mScriptObject with [ tChan , tNoteNum , tVelocity ]
	else if tMsgType = 128 then
		fsPostMIDIinput(tMsgType,tChan,tNoteNum,0)
		-- fluid_synth_noteoff(mSynth,tChan,tNoteNum)
		-- post "MIDINoteOff" with [ tChan , tNoteNum , tVelocity ]
		--post "MIDINoteOff" to mScriptObject with [ tChan , tNoteNum , tVelocity ]
	else if tMsgType = 224 then
		fsPostMIDIinput(tMsgType,tChan,tNoteNum,tVelocity)
		-- fluid_synth_pitch_bend(mSynth,tChan,tNoteNum)
		-- fsPostMIDIinput(tMsgType,tChan,tNoteNum,tVelocity)
		-- post "MIDIPitchBend" with [ tChan , tNoteNum , tVelocity ]
	else if tMsgType = 176 then
		fsPostMIDIinput(tMsgType,tChan,tNoteNum,tVelocity)
		-- fluid_synth_cc(mSynth,tChan,tNoteNum,tVelocity)
		-- fsPostMIDIinput(tMsgType,tChan,tNoteNum,tVelocity)
	   -- post "MIDIController" with [ tChan , tNoteNum , tVelocity ]
	end if
	return 0
end handler

private variable mMIDIBuffer as Data
private variable mMIDIBufferPtr as Pointer
variable mScriptObject as ScriptObject

public handler fsInitMIDIinput(in pInputPortName as optional String, in pTargetScriptObj as optional String) returns optional any
	if pTargetScriptObj is not nothing then
		resolve script object pTargetScriptObj
		put the result into mScriptObject
	else
		resolve script object "this stack"
		put the result into mScriptObject
	end if
	log ["MiDI IN TARGET ", mScriptObject]
	if mInited then
		if mMIDIDriver is not nothing then
				delete_fluid_midi_driver(mMIDIDriver)
				put nothing into mMIDIDriver
		end if
		if pInputPortName is nothing then
			put "LC FluidSynth MIDI in" into pInputPortName
		end if
		variable tWasSet as Boolean
      --if MCStringEncode(pInputPortName, kMCStringEncodingUTF8, false, pInputPortNameData) then
		--	put MCDataGetBytePtr(pInputPortNameData) into pInputPortNameDataPtr
		-- put fluid_settings_setstr(mSettings,"midi.driver","coremidi") into tWasSet
	 	put fluid_settings_setstr(mSettings,"midi.portname", pInputPortName) into tWasSet
	--	end if
	--	variable tDoRunLoopFunc as MCRunloopActionCallback
	--	variable tContext as optional Pointer
	 --  MCHandlerGetFunctionPtr(fsHandleMIDIinput,pMIDICalbackPtr)
	--	if MCHandlerGetFunctionPtr(doRunLoop, tDoRunLoopFunc) then
	--	  MCEngineAddRunloopAction(tDoRunLoopFunc, tContext, mRunloopAction)
	--		else
	--		  put "Unable to set run loop" into tError
	--		end if

     -- put MCMemoryAllocate(65536,mMIDIBufferPtr) into tDidAllocateBlock --- crashing has nothing to do with buffer size
		-- put MCMemoryAllocate(256,mMIDIBufferPtr) into tDidAllocateBlock
		put new_fluid_midi_driver(mSettings, fsHandleMIDIinput, nothing) into mMIDIDriver
 		--put new_fluid_midi_driver(mSettings, fsHandleMIDIinput , nothing) into mMIDIDriver
	end if
end handler

public handler fsEnsureInitialize() returns optional any
	if mInited then
		return mInited
	else
   	variable rMaj as Integer
   	variable rMin as Integer
   	variable rMicr as Integer
   	fluid_version(rMaj,rMin,rMicr)
   	log "FluidSynth Version:"
   	log [rMaj,rMin,rMicr]
      put new_fluid_settings() into mSettings
      put new_fluid_synth(mSettings) into mSynth
   	put new_fluid_audio_driver(mSettings,mSynth) into mAudioDriver
      if mAudioDriver is not nothing then
   	    put true into mInited
          return true
       else
          return false
       end if
   end if
end handler

public handler fsGetSoundFontCount() returns optional Integer
	variable tCount as Integer
	if fsEnsureInitialize() then
		if mSynth is not nothing then
         put fluid_synth_sfcount(mSynth) into tCount
         if tCount is a number then
			    return tCount
          end if
		end if
	end if
end handler

public handler fsLoadSoundFont(in pFilename as String) returns optional any
	variable tStatus as Integer
	if fsEnsureInitialize() then
		if fluid_is_soundfont(pFilename) then
			put fluid_synth_sfload(mSynth,pFilename,true) into tStatus
			if tStatus is not kFLUID_FAILED then
				return tStatus
			else
				return "Error: SoundFont did not load!"
			end if
		else
			return "Error: File May not be a valid SoundFont File!"
		end if
	else
		return "Error: FluidSynth not initialized!"
	end if
end handler

public handler fsGetSoundFontByIndex(in pSoundFontIndex as Integer) returns optional fs_SOUNDFONT
	variable tCount as Integer
	variable tSelectedSoundFont as optional fs_SOUNDFONT
   put nothing into tSelectedSoundFont
	if fsEnsureInitialize() then
		if mSynth is not nothing then
         if pSoundFontIndex > -1 then
   			put fluid_synth_get_sfont(mSynth, pSoundFontIndex) into tSelectedSoundFont
            log tSelectedSoundFont
   			if tSelectedSoundFont is not nothing then
   				-- put tSelectedSoundFont into mSelectedSoundFont
               -- log [pSoundFontId,tSelectedSoundFont]
               return tSelectedSoundFont
   			else
               return nothing
            end if
         else
            return nothing
         end if
      else
         return nothing
		end if
   else
      return nothing
	end if
end handler

public handler fsListLoadedSoundFonts() returns optional any
   variable tCount as optional Integer
   variable tString as optional ZStringNative -- ZStringNative -- String
   variable tStringList as optional String
   variable tIterate as optional Integer
   variable tSelectedSoundFont as optional fs_SOUNDFONT
   put nothing into tSelectedSoundFont
   put the empty string into tStringList
   put fsGetSoundFontCount() into tCount
   log tCount
   repeat with tIterate from 0 up to (tCount -1) by 1
      put fsGetSoundFontByIndex( tIterate ) into mSoundFont
      if mSoundFont is not nothing then
         unsafe
            put fluid_sfont_get_name(mSoundFont) into tString
         end unsafe
         if tString is not nothing and tString is not the empty string then
            put tIterate formatted as string && tString & "\n" after tStringList
         else
            put tIterate formatted as string && "Error\n" after tStringList
         end if
      else
         put tIterate formatted as string && "Error\n" after tStringList
      end if
      put nothing into mSoundFont
   end repeat
   if tStringList is not the empty string then
      return tStringList
   end if
end handler

public handler fsGetSoundFontNameByIndex(in tIndex as optional Integer) returns optional String
   variable tCount as optional Integer
   variable tString as optional ZStringNative
      --variable tString as optional ZStringNative
   variable tIterate as optional Integer
   variable tSelectedSoundFont as optional fs_SOUNDFONT

   --put fsGetSoundFontCount() into tCount
   -- log tCount
   -- repeat with tIterate from 1 up to tCount
   put fsGetSoundFontByIndex( tIndex ) into mSoundFont
   if mSoundFont is not nothing then
      unsafe
         put fluid_sfont_get_name(mSoundFont) into tString
      end unsafe
      put nothing into mSoundFont
      if tString is not nothing and tString is not the empty string then
         return tString
      else
         put nothing into mSoundFont
         return "Error"
      end if
   else
      put nothing into mSoundFont
     return "No Soundfont selected"
   end if
   -- end repeat
end handler

public handler fsMIDIPlayerInit() returns optional any
	if mPlayer is nothing then
		if fsEnsureInitialize() then
			put new_fluid_player(mSynth) into mPlayer
		end if
	-- else
		-- put new_fluid_player(mSynth) into mPlayer
	end if
end handler

public handler fsMIDIPlayerSetLoop(in pLoop as Number) returns nothing
	variable tStatus as Integer
	if mPlayer is not nothing then
	--	if fsEnsureInitialize() then
			put fluid_player_set_loop(mPlayer,pLoop) into tStatus
	--	end if
	end if
end handler

public handler fsLoadMIDIFile(in pFilename as String) returns optional any
	variable tStatus as Integer
	variable tBool as Boolean

	if fsEnsureInitialize() then
		if fluid_is_midifile(pFilename) then
			if mPlayer is not nothing then
				put delete_fluid_player(mPlayer) into tBool
				put new_fluid_player(mSynth) into mPlayer
			   put fluid_player_add(mPlayer,pFilename) into tStatus
				if tStatus is kFLUID_OK then
					return true
				else
					return false
				end if
			else
				put new_fluid_player(mSynth) into mPlayer
				put fluid_player_add(mPlayer,pFilename) into tStatus
			end if
		else
			return "Error: File May not be a valid MIDI File!"
		end if
	end if
end handler

public handler fsMIDIPlayerCurrentTick() returns optional any
	variable tTick as Integer
	variable tBool as Boolean

	if fsEnsureInitialize() then
		if mPlayer is not nothing then
			put fluid_player_get_current_tick(mPlayer) into tTick
			return tTick
		end if
	end if
	-- __safe foreign handler fluid_player_get_total_ticks(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_total_ticks"
end handler

public handler fsMIDIPlayerTotalTicks() returns optional any
	variable tTicks as Integer
	variable tBool as Boolean

	if fsEnsureInitialize() then
		if mPlayer is not nothing then
			put fluid_player_get_total_ticks(mPlayer) into tTicks
			return tTicks
		end if
	end if
	-- __safe foreign handler (in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_total_ticks"
end handler

public handler fsMIDIPlayerStop()
	if mPlayer is not nothing then
		fluid_player_stop(mPlayer)
		delete_fluid_player(mPLayer)
		put nothing into mPLayer
	end if
end handler

public handler fsMIDIPlayerPause()
	if mPlayer is not nothing then
		fluid_player_stop(mPlayer)
	end if
end handler

public handler fsMIDIPlayerPlay() returns optional any
	if mPlayer is not nothing then
		variable tStatus as Integer
		put fluid_player_play(mPlayer) into tStatus
		if tStatus is kFLUID_OK then
			return true
		else
			return false
		end if
	end if
end handler

public handler fsMIDIPlayerStatus() returns optional any
	variable tStatus as Integer
	if mPlayer is not nothing then
		put fluid_player_get_status(mPlayer) into tStatus
		if tStatus is 1 then
			return "playing"
		else if tStatus is 2 then
			return "play stopped"
		else
			return tStatus
		end if
	else
		return "no player"
	end if
end handler


public handler fsSetTempoMillisecsPerQuarterNote(in pTempoMillsecs as optional Integer)
	if pTempoMillsecs is nothing then
		put 500000 into pTempoMillsecs --- 500000 = 120 BPM
	end if
	fluid_player_set_midi_tempo(mPLayer,pTempoMillsecs)
end handler

public handler fsSetTempoBPM(in pBPM as optional Integer)
	if pBPM is nothing then
		put 120 into pBPM
	end if
	if mPLayer is not nothing then
		fluid_player_set_bpm(mPLayer,pBPM)
	end if
end handler

public handler fsGetTempoBPM() returns optional any
	variable tBPM as Integer
	if mPLayer is not nothing then
			put fluid_player_get_bpm(mPLayer) into tBPM
			return tBPM
	end if
end handler

public handler fsSystemReset()
	fluid_synth_system_reset(mSynth)
end handler

public handler fsSetGain(in pGain as optional Number) returns optional any
	if pGain is nothing then
		put 0.5 into pGain
	end if
	variable tWasSet as CInt
	put fluid_settings_setnum(mSettings,"synth.gain",pGain) into tWasSet
	if tWasSet is kFLUID_OK then
		return true
	else
		return false
	end if
end handler

public handler fsGetGain() returns optional any
	variable rGain as Number
	variable tWasGotten as CInt
	put fluid_settings_getnum(mSettings,"synth.gain",rGain) into tWasGotten
	if tWasGotten is kFLUID_OK then
		return rGain
	else
		return false
	end if
end handler

public handler fsNoteOn(in pChannel as Integer, in pKey as Integer, in pVel as Integer)
	fluid_synth_noteon(mSynth,pChannel,pKey,pVel)
end handler

public handler fsNoteOff(in pChannel as Integer, in pKey as Integer)
	fluid_synth_noteoff(mSynth,pChannel,pKey)
end handler

public handler fsPitchBend(in pChannel as Integer, in pBend as Integer)
	fluid_synth_pitch_bend(mSynth,pChannel,pBend)
end handler

public handler fsProgramChange(in pChannel as Integer, in pProgramNum as Integer)
	fluid_synth_program_change(mSynth,pChannel,pProgramNum)
end handler

public handler fsBankSelect(in pChannel as Integer, in pProgramNum as Integer)
	fluid_synth_bank_select(mSynth,pChannel,pProgramNum)
end handler

public handler fsStopDriver()
	if mMIDIDriver is not nothing then
			delete_fluid_midi_driver(mMIDIDriver)
			put nothing into mMIDIDriver
	end if
	if mPLayer is not nothing then
		delete_fluid_player(mPLayer)
		put nothing into mPLayer
	end if
	if mAudioDriver is not nothing then
		delete_fluid_audio_driver(mAudioDriver)
		put nothing into mAudioDriver
	end if
	-- if mSynth is not nothing then
	--	delete_fluid_synth(mSynth)
	put nothing into mSynth
	-- end if
	put nothing into mSettings
	put false into mInited
end handler

end library
