library com.ferruslogic.library.fluidsynth

metadata version is "0.5"
metadata author is "FerrusLogic, Paul McClernan"
metadata title is "LC FluidSynth"

use com.livecode.foreign
use com.livecode.engine

private type fs_SETTINGS is Pointer
private type fs_SYNTH is Pointer
private type fs_AUIDIOdrvr is Pointer
private type fs_PLAYER is Pointer
private type fs_SOUNDFONT is Pointer

private type fs_MIDIROUTER is Pointer
private type fs_MIDIROUTER_rule is Pointer
private type fs_MIDIdrvr is Pointer
private type fs_MIDIEvent is Pointer

constant kFLUID_OK is 0
constant kFLUID_FAILED is -1

private variable mInited as Boolean
private variable mSettings as optional fs_SETTINGS
private variable mSynth as optional fs_SYNTH
private variable mAudioDriver	as optional fs_AUIDIOdrvr
private variable mPlayer as optional fs_PLAYER
private variable mSelectedSoundFont	as optional fs_SOUNDFONT
private variable mMIDIDriver as optional fs_MIDIdrvr

__safe foreign handler new_fluid_settings() returns fs_SETTINGS binds to "c:libfluidsynth>new_fluid_settings"
__safe foreign handler fluid_settings_setnum(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, in pNumber as CDouble) returns Cbool binds to "c:libfluidsynth>fluid_settings_setnum"
__safe foreign handler fluid_settings_getnum(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, out rNumber as CDouble) returns CBool binds to "c:libfluidsynth>fluid_settings_getnum"
__safe foreign handler fluid_settings_setstr(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, in pSettingString as ZStringNative) returns Cbool binds to "c:libfluidsynth>fluid_settings_setnum"
__safe foreign handler fluid_settings_getstr(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, out rSettingString as ZStringNative) returns CBool binds to "c:libfluidsynth>fluid_settings_getnum"
__safe foreign handler fluid_is_midifile(in pFilename as ZStringNative ) returns CBool binds to "c:libfluidsynth>fluid_is_midifile"
__safe foreign handler fluid_is_soundfont(in pFilename as ZStringNative ) returns CBool binds to "c:libfluidsynth>fluid_is_soundfont"
-- __safe foreign handler fluid_version_str() returns optional Pointer binds to "c:libfluidsynth>fluid_version_str"
__safe foreign handler fluid_version(out rMaj as CInt, out rMin as CInt, out rMicr as CInt) returns nothing binds to "c:libfluidsynth>fluid_version"
__safe foreign handler new_fluid_audio_driver(in pSettings as fs_SETTINGS,in pSynth as fs_SYNTH ) \
																			returns optional fs_AUIDIOdrvr binds to "c:libfluidsynth>new_fluid_audio_driver"
__safe foreign handler delete_fluid_audio_driver(in pDriver as fs_AUIDIOdrvr ) returns nothing binds to "c:libfluidsynth>delete_fluid_audio_driver"
__safe foreign handler new_fluid_synth(in pSettings as fs_SETTINGS) returns optional fs_SYNTH binds to "c:libfluidsynth>new_fluid_synth"
__safe foreign handler delete_fluid_synth(in pSynth as fs_SYNTH) returns CBool binds to "c:libfluidsynth>delete_fluid_synth"
__safe foreign handler new_fluid_player(in pSynth as fs_SYNTH ) returns optional fs_PLAYER binds to "c:libfluidsynth>new_fluid_player"
__safe foreign handler delete_fluid_player(in pPlayer as fs_PLAYER) returns CBool binds to "c:libfluidsynth>delete_fluid_player"

__safe foreign handler fluid_synth_sfload(in pSynth as fs_SYNTH,in pFilename as ZStringNative,in pResetPresets as CBool ) returns CInt binds to "c:libfluidsynth>fluid_synth_sfload"
-- fluid_synth_get_sfont (fluid_synth_t *synth, unsigned int num)
__safe foreign handler fluid_synth_get_sfont(in pSynth as fs_SYNTH,in pSFontIndexNum as CInt) returns optional fs_SOUNDFONT binds to "c:libfluidsynth>fluid_synth_get_sfont"
__safe foreign handler fluid_synth_system_reset(in pSynth as fs_SYNTH) returns CBool binds to "c:libfluidsynth>fluid_synth_system_reset"
__safe foreign handler fluid_synth_noteon(in pSynth as fs_SYNTH,in pChan as CInt,in pKey as CInt, in pVel as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteon"
__safe foreign handler fluid_synth_noteoff(in pSynth as fs_SYNTH,in pChan as CInt,in pKey as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteoff"
__safe foreign handler fluid_synth_pitch_bend(in pSynth as fs_SYNTH,in pChan as CInt,in pBend as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_pitch_bend" -- bend 0-16383, 8192 as center
__safe foreign handler fluid_synth_cc(in pSynth as fs_SYNTH,in pChan as CInt,in pControllerNum as CInt, in pCCValue as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_cc"
__safe foreign handler fluid_synth_get_cc(in pSynth as fs_SYNTH,in pChan as CInt,in pControllerNum as CInt, out rCCValue as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_get_cc"
__safe foreign handler fluid_synth_program_change(in pSynth as fs_SYNTH,in pChan as CInt,in pProgram as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_program_change"
__safe foreign handler fluid_synth_bank_select(in pSynth as fs_SYNTH,in pChan as CInt,in pBankNum as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_bank_select"
__safe foreign handler fluid_synth_sfcount(in pSynth as fs_SYNTH ) returns CInt binds to "c:libfluidsynth>fluid_synth_sfcount"

__safe foreign handler fluid_player_add(in pPlayer as fs_PLAYER,in pFilename as ZStringNative) returns CBool binds to "c:libfluidsynth>fluid_player_add"
__safe foreign handler fluid_player_play(in pPlayer as fs_PLAYER) returns CBool binds to "c:libfluidsynth>fluid_player_play"
__safe foreign handler fluid_player_stop(in pPlayer as fs_PLAYER) returns CBool binds to "c:libfluidsynth>fluid_player_stop"
__safe foreign handler fluid_player_set_bpm(in pPlayer as fs_PLAYER,in pBPM as CInt) returns CBool binds to "c:libfluidsynth>fluid_player_set_bpm"
__safe foreign handler fluid_player_set_midi_tempo(in pPlayer as fs_PLAYER,in pMicroSecsPerQrtrNote as CInt) returns CBool binds to "c:libfluidsynth>fluid_player_set_midi_tempo" -- per MIDI file spec so 500000 = 120 BPM
__safe foreign handler fluid_player_get_status(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_status"

-- fluid_player_set_loop (fluid_player_t *player, int loop) Enable looping of a MIDI player. More...
-- FLUIDSYNTH_API int 	fluid_player_set_midi_tempo (fluid_player_t *player, int tempo)	Set the tempo of a MIDI player. More...
-- FLUIDSYNTH_API int 	fluid_player_set_bpm (fluid_player_t *player, int bpm) Set the tempo of a MIDI player in beats per minute. More...
-- FLUIDSYNTH_API int 	fluid_player_set_playback_callback (fluid_player_t *player, handle_midi_event_func_t handler, void *handler_data) Change the MIDI callback function. More...
-- FLUIDSYNTH_API int 	fluid_player_get_status (fluid_player_t *player) Get MIDI player status. More...
-- FLUIDSYNTH_API int 	fluid_player_get_current_tick (fluid_player_t *player) Get the number of tempo ticks passed. More...
-- FLUIDSYNTH_API int 	fluid_player_get_total_ticks (fluid_player_t *player) Looks through all available MIDI tracks and gets the absolute tick of the very last event to play. More...
-- FLUIDSYNTH_API int 	fluid_player_get_bpm (fluid_player_t *player) Get the tempo of a MIDI player in beats per minute. More...
-- FLUIDSYNTH_API int 	fluid_player_get_midi_tempo (fluid_player_t *player) Get the tempo of a MIDI player. More...
-- FLUIDSYNTH_API int 	fluid_player_seek (fluid_player_t *player, int ticks) Seek in the currently playing file. More...

-- http://www.fluidsynth.org/api-1.x/index.html#RealtimeMIDI

__safe foreign handler new_fluid_midi_router(in pSettings as fs_SETTINGS, in pHandler as any, in pHandlerData as optional any)\
 																			returns optional fs_MIDIROUTER binds to "c:libfluidsynth>new_fluid_midi_router"
__safe foreign handler delete_fluid_midi_router(in pPlayer as fs_MIDIROUTER) returns CBool binds to "c:libfluidsynth>delete_fluid_midi_router"
__safe foreign handler new_fluid_midi_router_rule() returns fs_MIDIROUTER_rule binds to "c:libfluidsynth>new_fluid_midi_router_rule"
__safe foreign handler delete_fluid_midi_router_rule(in pRouterRule as fs_MIDIROUTER_rule) returns CBool binds to "c:libfluidsynth>new_fluid_midi_router_rule"

<<<<<<< HEAD
public foreign handler type handle_midi_event_func_t( in pOptionalDataPtr as optional Pointer, in mMIDIBufferPtr as Pointer) returns CInt
=======
private variable mMIDIEvent as optional Pointer
public foreign handler type handle_midi_event_func_t( in pMyDataPtr as optional Pointer, in pMIDIEvent as Pointer) returns CInt
>>>>>>> 24f6fe9c5622eada6471d10ead5747942359ac1a

__safe foreign handler new_fluid_midi_driver(in pSettings as fs_SETTINGS, in pHandler as handle_midi_event_func_t, in pOptionalDataPtr as optional Pointer) \
																			returns optional fs_MIDIdrvr binds to "c:libfluidsynth>new_fluid_midi_driver"
__safe foreign handler delete_fluid_midi_driver(in pPlayer as fs_MIDIdrvr) returns CBool binds to "c:libfluidsynth>delete_fluid_midi_driver"
__safe foreign handler fluid_midi_event_get_type(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_type"
__safe foreign handler fluid_midi_event_get_channel(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_channel"
__safe foreign handler fluid_midi_event_get_key(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_key"
__safe foreign handler fluid_midi_event_get_velocity(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>fluid_midi_event_get_velocity"
__safe foreign handler delete_fluid_midi_event(in pMIDIEvent as fs_MIDIEvent) returns Cint binds to "c:libfluidsynth>delete_fluid_midi_event"

constant kMCStringEncodingUTF8 is 4
__safe foreign handler MCStringEncode(in pString as String, in pEncoding as CUInt, in pIsExternalRep as CBool, out rUTF8String as Data) returns CBool binds to "<builtin>"
--foreign handler MCStringCreateWithCString(in pString as Pointer, out rString as String) returns CBool binds to "<builtin>"
--foreign handler MCStringCreateWithBytes(in pBytes as Pointer, in pByteCount as LCUInt, in pEncoding as CUInt, in pIsExternalRep as CBool, out rString as String) returns CBool binds to "<builtin>"
--foreign handler MCDataConvertStringToData(in pString as String, out rData as Data) returns CBool binds to "<builtin>"
__safe foreign handler MCDataGetBytePtr(in pData as Data) returns optional Pointer binds to "<builtin>"

<<<<<<< HEAD
__safe foreign handler MCMemoryAllocate(in pSize as UIntSize, out rBlockPtr as Pointer) returns CBool binds to "<builtin>"
-- allocates a block of size pSize bytes, places the pointer into rBlockPtr and returns true - or just returns false if it fails
-- MCMemoryReallocate(T *p_block, size_t p_new_size, T*& r_new_block)
__safe foreign handler MCMemoryReallocate(in rBlockPtr as Pointer, in pSize as UIntSize, out rReAllocBlockPtr as Pointer) returns CBool binds to "<builtin>"
__safe foreign handler MCMemoryDeallocate(in rBlockPtr as Pointer) returns nothing binds to "<builtin>"

private handler fsHandleMIDIinput(in pMyDataPtr as optional Pointer, in mMIDIBufferPtr as Pointer ) returns CInt
	-- log mMIDIBufferPtr
	variable tDidAllocate as Boolean
=======
-- foreign handler MCMemoryAllocate(in pSize as UIntSize, out rBlock as Pointer) returns CBool
-- It allocates a block of size pSize bytes, places the pointer into rBlock and returns true - or just returns false if it fails
-- you can then pass that pointer htmltidy for it to populate with whatever it does

private handler fsHandleMIDIinput(in pMyDataPtr as optional Pointer, in pMIDIEvent as optional Pointer ) returns CInt
	log [pMIDIEvent]
>>>>>>> 24f6fe9c5622eada6471d10ead5747942359ac1a
	variable tChan as Integer
	variable tMsgType as Integer
	variable tNoteNum as Integer
	variable tVelocity as Integer
<<<<<<< HEAD
	-- variable tMIDIBufferPtr as Pointer
	put fluid_midi_event_get_type(mMIDIBufferPtr) into tMsgType
	put fluid_midi_event_get_channel(mMIDIBufferPtr) into tChan
   put fluid_midi_event_get_key(mMIDIBufferPtr) into tNoteNum
	put fluid_midi_event_get_velocity(mMIDIBufferPtr) into tVelocity
	--log [tMsgType,tChan,tNoteNum,tVelocity]
	-- MCMemoryDeallocate(mMIDIBufferPtr)
	-- put MCMemoryAllocate(256,mMIDIBufferPtr) into tDidAllocate
		-- if tDidAllocate then
		-- put tMIDIBufferPtr into mMIDIBufferPtr
	   -- end if
	--	repeat 100 times
	fluid_synth_noteon(mSynth,tChan,tNoteNum,tVelocity)
	--	end repeat
	-- post "MIDIInput" -- with (tChan formatted as string & "," & tNoteNum formatted as string &"," & tVelocity formatted as string)
	return 0
=======
	variable tNewPtr as Pointer
	if pMIDIEvent is not nothing then
		put fluid_midi_event_get_type(pMIDIEvent) into tMsgType
		put fluid_midi_event_get_channel(pMIDIEvent) into tChan
	   put fluid_midi_event_get_key(pMIDIEvent) into tNoteNum
		put fluid_midi_event_get_velocity(pMIDIEvent) into tVelocity
		log [tMsgType,tChan,tNoteNum,tVelocity]
		-- delete_fluid_midi_event(pMIDIEvent)
		return 0
	end if
>>>>>>> 24f6fe9c5622eada6471d10ead5747942359ac1a
end handler

private variable mMIDIBuffer as Data
private variable mMIDIBufferPtr as Pointer

public handler fsInitMIDIinput(in pInputPortName as optional String) returns optional any
	if mInited then
		if pInputPortName is nothing then
			put "LC FluidSynth MIDI in" into pInputPortName
		end if
		variable tWasSet as Boolean
		variable pInputPortNameData as Data
		variable pInputPortNameDataPtr as Pointer
		variable tMIDIBufferPtr as Pointer
		variable tDidAllocateBlock as Boolean

      --if MCStringEncode(pInputPortName, kMCStringEncodingUTF8, false, pInputPortNameData) then
		--	put MCDataGetBytePtr(pInputPortNameData) into pInputPortNameDataPtr
		-- put fluid_settings_setstr(mSettings,"midi.driver","coremidi") into tWasSet
	 	-- put fluid_settings_setstr(mSettings,"midi.portname","LC_FS_MIDI IN") into tWasSet
	--	end if
	--	variable tDoRunLoopFunc as MCRunloopActionCallback
	--	variable tContext as optional Pointer
	 --  MCHandlerGetFunctionPtr(fsHandleMIDIinput,pMIDICalbackPtr)
	--	if MCHandlerGetFunctionPtr(doRunLoop, tDoRunLoopFunc) then
	--	  MCEngineAddRunloopAction(tDoRunLoopFunc, tContext, mRunloopAction)
	--		else
	--		  put "Unable to set run loop" into tError
	--		end if

     -- put MCMemoryAllocate(65536,mMIDIBufferPtr) into tDidAllocateBlock --- crashing has nothing to do with buffer size
		-- put MCMemoryAllocate(256,mMIDIBufferPtr) into tDidAllocateBlock
		put new_fluid_midi_driver(mSettings, fsHandleMIDIinput, nothing) into mMIDIDriver
 		--put new_fluid_midi_driver(mSettings, fsHandleMIDIinput , nothing) into mMIDIDriver
	end if
end handler

public handler fsEnsureInitialize() returns optional any
	if mInited then
		return mInited
	end if
	variable rMaj as Integer
	variable rMin as Integer
	variable rMicr as Integer
	fluid_version(rMaj,rMin,rMicr)
	log "FluidSynth Version:"
	log [rMaj,rMin,rMicr]
   put new_fluid_settings() into mSettings
   put new_fluid_synth(mSettings) into mSynth
	put new_fluid_audio_driver(mSettings,mSynth) into mAudioDriver
	put true into mInited
end handler


public handler fsGetSoundFontCount() returns optional Integer
	variable tCount as Integer
	if fsEnsureInitialize() then
		if mSynth is not nothing then
			return fluid_synth_sfcount(mSynth)
		end if
	end if
end handler

public handler fsGetSoundFontByIndex(in pSoundFontId as Integer) returns optional Integer
	variable tCount as Integer
	variable tSelectedSoundFont as optional fs_SOUNDFONT
	if fsEnsureInitialize() then
		if mSynth is not nothing then
			put fluid_synth_get_sfont(mSynth, pSoundFontId) into tSelectedSoundFont
			if tSelectedSoundFont is not nothing then
				put tSelectedSoundFont into mSelectedSoundFont
			end if
		end if
	end if
end handler

public handler fsLoadSoundFont(in pFilename as String) returns optional any
	variable tStatus as Integer
	if fsEnsureInitialize() then
		if fluid_is_soundfont(pFilename) then
			put fluid_synth_sfload(mSynth,pFilename,true) into tStatus
			if tStatus is not kFLUID_FAILED then
				return tStatus
			else
				return "Error: SoundFont did not load!"
			end if
		else
			return "Error: File May not be a valid SoundFont File!"
		end if
	else
		return false
	end if
end handler

public handler fsMIDIPlayerInit() returns optional any
	if mPlayer is nothing then
		if fsEnsureInitialize() then
			put new_fluid_player(mSynth) into mPlayer
		end if
	end if
end handler

public handler fsLoadMIDIFile(in pFilename as String) returns optional any
	variable tStatus as Integer
	if fsEnsureInitialize() then
		if fluid_is_midifile(pFilename) then
			put fluid_player_add(mPlayer,pFilename) into tStatus
			if tStatus is kFLUID_OK then
				return true
			else
				return false
			end if
		else
			return "Error: File May not be a valid MIDI File!"
		end if
	else
		return false
	end if
end handler

public handler fsMIDIPlayerStop()
	if mPlayer is not nothing then
		fluid_player_stop(mPlayer)
		delete_fluid_player(mPLayer)
		put nothing into mPLayer
	end if
end handler

public handler fsMIDIPlayerPause()
	if mPlayer is not nothing then
		fluid_player_stop(mPlayer)
	end if
end handler

public handler fsMIDIPlayerPlay() returns optional any
	if mPlayer is not nothing then
		variable tStatus as Integer
		put fluid_player_play(mPlayer) into tStatus
		if tStatus is kFLUID_OK then
			return true
		else
			return false
		end if
	end if
end handler

public handler fsMIDIPlayerStatus() returns optional any
	variable tStatus as Integer
	if mPlayer is not nothing then
		put fluid_player_get_status(mPlayer) into tStatus
		if tStatus is 1 then
			return "playing"
		else if tStatus is 2 then
			return "play stopped"
		else
			return tStatus
		end if
	else
		return "no player"
	end if
end handler

public handler fsSetTempoMillisecsPerQuarterNote(in pTempoMillsecs as optional Integer)
	if pTempoMillsecs is nothing then
		put 500000 into pTempoMillsecs --- 500000 = 120 BPM
	end if
	fluid_player_set_midi_tempo(mPLayer,pTempoMillsecs)
end handler

public handler fsSetTempoBPM(in pBPM as optional Integer)
	if pBPM is nothing then
		put 120 into pBPM
	end if
	if mPLayer is not nothing then
		fluid_player_set_bpm(mPLayer,pBPM)
	end if
end handler

public handler fsSystemReset()
	fluid_synth_system_reset(mSynth)
end handler

public handler fsSetGain(in pGain as optional Number) returns optional any
	if pGain is nothing then
		put 0.5 into pGain
	end if
	variable tWasSet as Boolean
	put fluid_settings_setnum(mSettings,"synth.gain",pGain) into tWasSet
	return tWasSet
end handler

public handler fsGetGain() returns optional any
	variable rGain as Number
	variable tWasGotten as Boolean
	put fluid_settings_getnum(mSettings,"synth.gain",rGain) into tWasGotten
	if tWasGotten then
		return rGain
	else
		return false
	end if
end handler

public handler fsNoteOn(in pChannel as Integer, in pKey as Integer, in pVel as Integer)
	fluid_synth_noteon(mSynth,pChannel,pKey,pVel)
end handler

public handler fsNoteOff(in pChannel as Integer, in pKey as Integer)
	fluid_synth_noteoff(mSynth,pChannel,pKey)
end handler

public handler fsPitchBend(in pChannel as Integer, in pBend as Integer)
	fluid_synth_pitch_bend(mSynth,pChannel,pBend)
end handler

public handler fsProgramChange(in pChannel as Integer, in pProgramNum as Integer)
	fluid_synth_program_change(mSynth,pChannel,pProgramNum)
end handler

public handler fsBankSelect(in pChannel as Integer, in pProgramNum as Integer)
	fluid_synth_bank_select(mSynth,pChannel,pProgramNum)
end handler

public handler fsStopDriver()
	if mPLayer is not nothing then
		delete_fluid_player(mPLayer)
		put nothing into mPLayer
	end if
	if mAudioDriver is not nothing then
		delete_fluid_audio_driver(mAudioDriver)
		put nothing into mAudioDriver
	end if
	-- if mSynth is not nothing then
	--	delete_fluid_synth(mSynth)
	put nothing into mSynth
	-- end if
	put nothing into mSettings
	put false into mInited
end handler

end library
