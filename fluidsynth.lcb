library com.ferruslogic.library.fluidsynth

metadata version is "0.5"
metadata author is "FerrusLogic, Paul McClernan"
metadata title is "LC FluidSynth"

use com.livecode.foreign
use com.livecode.engine

private type fs_type_SETTINGS is Pointer
private type fs_type_SYNTH is Pointer
private type fs_type_DRIVER is Pointer
private type fs_type_PLAYER is Pointer

__safe foreign handler new_fluid_settings() returns fs_type_SETTINGS binds to "c:libfluidsynth>new_fluid_settings"
__safe foreign handler fluid_settings_setnum(in pSettings as fs_type_SETTINGS, in pSettingName as ZStringNative, in pNumber as CDouble) returns CBool binds to "c:libfluidsynth>fluid_settings_setnum"
__safe foreign handler fluid_settings_getnum(in pSettings as fs_type_SETTINGS, in pSettingName as ZStringNative, out pNumber as CDouble) returns CBool binds to "c:libfluidsynth>fluid_settings_getnum"

__safe foreign handler new_fluid_synth(in pSettings as fs_type_SETTINGS) returns optional fs_type_SYNTH binds to "c:libfluidsynth>new_fluid_synth"
-- __safe foreign handler new_mac_fluid_synth(in pSettings as fs_type_SETTINGS) returns optional fs_type_SYNTH binds to "c:FluidSynth.framework>new_fluid_synth"
__safe foreign handler new_fluid_audio_driver(in pSettings as fs_type_SETTINGS,in pSynth as fs_type_SYNTH ) returns optional fs_type_DRIVER binds to "c:libfluidsynth>new_fluid_audio_driver"
-- __safe foreign handler new_mac_fluid_audio_driver(in pSettings as fs_type_SETTINGS,in pSynth as fs_type_SYNTH ) returns optional fs_type_DRIVER binds to "c:FluidSynth.framework>new_fluid_audio_driver"
__safe foreign handler new_fluid_player(in pSynth as fs_type_SYNTH ) returns optional fs_type_PLAYER binds to "c:libfluidsynth>new_fluid_player"

__safe foreign handler delete_fluid_audio_driver(in pDriver as fs_type_DRIVER ) returns nothing binds to "c:libfluidsynth>delete_fluid_audio_driver"
-- __safe foreign handler delete_fluid_synth_driver(in pSynth as fs_type_SYNTH ) returns nothing binds to "libfluidsynth>delete_fluid_synth_driver"

__safe foreign handler fluid_synth_sfload(in pSynth as fs_type_SYNTH,in pFilename as ZStringNative,in pResetPresets as CBool ) returns CInt binds to "c:libfluidsynth>fluid_synth_sfload"
__safe foreign handler fluid_is_midifile(in pFilename as ZStringNative ) returns CBool binds to "c:libfluidsynth>fluid_is_midifile"
__safe foreign handler fluid_player_add(in pPlayer as fs_type_PLAYER,in pFilename as ZStringNative) returns CBool binds to "c:libfluidsynth>fluid_player_add"
__safe foreign handler fluid_player_play(in pPlayer as fs_type_PLAYER) returns CBool binds to "c:libfluidsynth>fluid_player_play"
__safe foreign handler fluid_player_stop(in pPlayer as fs_type_PLAYER) returns CBool binds to "c:libfluidsynth>fluid_player_stop"


__safe foreign handler fluid_synth_noteon(in pSynth as fs_type_SYNTH,in pChan as CInt,in pKey as CInt, in pVel as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteon"
__safe foreign handler fluid_synth_noteoff(in pSynth as fs_type_SYNTH,in pChan as CInt,in pKey as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteoff"

-- bend 0-16383 with 8192 as center
__safe foreign handler fluid_synth_pitch_bend(in pSynth as fs_type_SYNTH,in pChan as CInt,in pBend as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_pitch_bend"
__safe foreign handler fluid_synth_program_change(in pSynth as fs_type_SYNTH,in pChan as CInt,in pProgram as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_program_change"
-- fluid_synth_bank_select (fluid_synth_t *synth, int chan, unsigned int bank)
__safe foreign handler fluid_synth_bank_select(in pSynth as fs_type_SYNTH,in pChan as CInt,in pBankNum as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_bank_select"

__safe foreign handler fluid_synth_sfcount(in pSynth as fs_type_SYNTH ) returns CInt binds to "c:libfluidsynth>fluid_synth_sfcount"

private variable mInited as Boolean
private variable mSettings as optional fs_type_SETTINGS
private variable mSynth as optional fs_type_SYNTH
private variable mAudioDriver	as optional fs_type_DRIVER
private variable mPlayer as optional fs_type_PLAYER

public handler fsEnsureInitialize() returns optional any
	if mInited then
		return mInited
	end if
	-- put new_mac_fluid_settings() into mSettings
   put new_fluid_settings() into mSettings
   put new_fluid_synth(mSettings) into mSynth
	-- put new_mac_fluid_synth(mSettings) into mSynth
	-- put "F: ... /sf2/example.sf2" into tFilename
	-- fluid_synth_sfcount(mSynth)
	-- fluid_synth_sfload(mSynth,tFilename,1)
	put new_fluid_audio_driver(mSettings,mSynth) into mAudioDriver
	-- put new_mac_fluid_audio_driver(mSettings,mSynth) into mAudioDriver
	put true into mInited
end handler


public handler fsLoadSoundFont(in pFilename as String) returns Integer
	if fsEnsureInitialize() then
		-- put true into mInited -- redundant
		return fluid_synth_sfload(mSynth,pFilename,true)
	else
		return false
	end if
end handler

public handler fsPlayMIDIFile(in pFilename as String) returns optional any
	if fsEnsureInitialize() then
		if fluid_is_midifile(pFilename) then
			put new_fluid_player(mSynth) into mPlayer
			fluid_player_add(mPlayer,pFilename)
			fluid_player_play(mPlayer)
			return true
		else
			return true
		end if
	else
		return false
	end if
end handler

public handler fsSetGain(in pGain as optional Number) returns optional any
	if pGain is nothing then
		put 0.5 into pGain
	end if
	return fluid_settings_setnum(mSettings,"synth.gain",pGain)
end handler

public handler fsGetGain() returns optional any
	variable rGain as Number
	variable tSettingDoesNotExist as Boolean
	put fluid_settings_getnum(mSettings,"synth.gain",rGain) into tSettingDoesNotExist
	if not tSettingDoesNotExist then
		return rGain
	else
		return "Gain Setting does not exist"
	end if
end handler


public handler fsMIDIFilePlayerStop() returns optional any
	fluid_player_stop(mPlayer)
end handler

public handler fsNoteOn(in pChannel as Integer, in pKey as Integer, in pVel as Integer)
	fluid_synth_noteon(mSynth,pChannel,pKey,pVel)
end handler

public handler fsNoteOff(in pChannel as Integer, in pKey as Integer)
	fluid_synth_noteoff(mSynth,pChannel,pKey)
end handler

public handler fsPitchBend(in pChannel as Integer, in pBend as Integer)
	fluid_synth_pitch_bend(mSynth,pChannel,pBend)
end handler

public handler fsProgramChange(in pChannel as Integer, in pProgramNum as Integer)
	fluid_synth_program_change(mSynth,pChannel,pProgramNum)
end handler

public handler fsStopDriver()
	delete_fluid_audio_driver(mAudioDriver)
	put nothing into mAudioDriver
	put false into mInited
end handler

end library
