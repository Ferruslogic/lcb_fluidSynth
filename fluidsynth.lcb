library com.ferruslogic.library.fluidsynth

metadata version is "0.5"
metadata author is "FerrusLogic, Paul McClernan"
metadata title is "LC FluidSynth"

use com.livecode.foreign
use com.livecode.engine

private type fs_SETTINGS is Pointer
private type fs_SYNTH is Pointer
private type fs_AUIDIOdrvr is Pointer
private type fs_PLAYER is Pointer
private type fs_MIDIROUTER is Pointer
private type fs_MIDIROUTER_rule is Pointer
private type fs_MIDIdrvr is Pointer

private variable mInited as Boolean
private variable mSettings as optional fs_SETTINGS
private variable mSynth as optional fs_SYNTH
private variable mAudioDriver	as optional fs_AUIDIOdrvr
private variable mPlayer as optional fs_PLAYER
private variable mMIDIDriver	as optional fs_MIDIdrvr

__safe foreign handler new_fluid_settings() returns fs_SETTINGS binds to "c:libfluidsynth>new_fluid_settings"
__safe foreign handler fluid_settings_setnum(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, in pNumber as CDouble) returns CBool binds to "c:libfluidsynth>fluid_settings_setnum"
__safe foreign handler fluid_settings_getnum(in pSettings as fs_SETTINGS, in pSettingName as ZStringNative, out pNumber as CDouble) returns CBool binds to "c:libfluidsynth>fluid_settings_getnum"
__safe foreign handler fluid_is_midifile(in pFilename as ZStringNative ) returns CBool binds to "c:libfluidsynth>fluid_is_midifile"
-- __safe foreign handler fluid_version_str() returns optional Pointer binds to "c:libfluidsynth>fluid_version_str"
__safe foreign handler fluid_version(out rMaj as CInt, out rMin as CInt, out rMicr as CInt) returns nothing binds to "c:libfluidsynth>fluid_version"

__safe foreign handler new_fluid_audio_driver(in pSettings as fs_SETTINGS,in pSynth as fs_SYNTH ) \
																			returns optional fs_AUIDIOdrvr binds to "c:libfluidsynth>new_fluid_audio_driver"
__safe foreign handler delete_fluid_audio_driver(in pDriver as fs_AUIDIOdrvr ) returns nothing binds to "c:libfluidsynth>delete_fluid_audio_driver"
__safe foreign handler new_fluid_synth(in pSettings as fs_SETTINGS) returns optional fs_SYNTH binds to "c:libfluidsynth>new_fluid_synth"
__safe foreign handler delete_fluid_synth(in pSynth as fs_SYNTH) returns CBool binds to "c:libfluidsynth>delete_fluid_synth"
__safe foreign handler new_fluid_player(in pSynth as fs_SYNTH ) returns optional fs_PLAYER binds to "c:libfluidsynth>new_fluid_player"
__safe foreign handler delete_fluid_player(in pPlayer as fs_PLAYER) returns CBool binds to "c:libfluidsynth>delete_fluid_player"

-- http://www.fluidsynth.org/api-1.x/index.html#RealtimeMIDI
__safe foreign handler new_fluid_midi_router(in pSettings as fs_SETTINGS, in pHandler as any, in pHandlerData as optional any)\
 																			returns optional fs_MIDIROUTER binds to "c:libfluidsynth>new_fluid_midi_router"
__safe foreign handler delete_fluid_midi_router(in pPlayer as fs_MIDIROUTER) returns CBool binds to "c:libfluidsynth>delete_fluid_midi_router"
__safe foreign handler new_fluid_midi_router_rule() returns fs_MIDIROUTER_rule binds to "c:libfluidsynth>new_fluid_midi_router_rule"
__safe foreign handler delete_fluid_midi_router_rule(in pRouterRule as fs_MIDIROUTER_rule) returns CBool binds to "c:libfluidsynth>new_fluid_midi_router_rule"
__safe foreign handler new_fluid_midi_driver(in pSettings as fs_SETTINGS, in pHandler as any, in pHandlerData as optional any )\
																			returns optional fs_MIDIdrvr binds to "c:libfluidsynth>new_fluid_midi_driver"
__safe foreign handler delete_fluid_midi_driver(in pPlayer as fs_MIDIdrvr) returns CBool binds to "c:libfluidsynth>delete_fluid_midi_driver"

__safe foreign handler fluid_synth_sfload(in pSynth as fs_SYNTH,in pFilename as ZStringNative,in pResetPresets as CBool ) returns CInt binds to "c:libfluidsynth>fluid_synth_sfload"
__safe foreign handler fluid_synth_system_reset(in pSynth as fs_SYNTH) returns CBool binds to "c:libfluidsynth>fluid_synth_system_reset"
__safe foreign handler fluid_synth_noteon(in pSynth as fs_SYNTH,in pChan as CInt,in pKey as CInt, in pVel as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteon"
__safe foreign handler fluid_synth_noteoff(in pSynth as fs_SYNTH,in pChan as CInt,in pKey as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_noteoff"
__safe foreign handler fluid_synth_pitch_bend(in pSynth as fs_SYNTH,in pChan as CInt,in pBend as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_pitch_bend" -- bend 0-16383, 8192 as center
__safe foreign handler fluid_synth_program_change(in pSynth as fs_SYNTH,in pChan as CInt,in pProgram as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_program_change"
__safe foreign handler fluid_synth_bank_select(in pSynth as fs_SYNTH,in pChan as CInt,in pBankNum as CInt ) returns CInt binds to "c:libfluidsynth>fluid_synth_bank_select"
__safe foreign handler fluid_synth_sfcount(in pSynth as fs_SYNTH ) returns CInt binds to "c:libfluidsynth>fluid_synth_sfcount"

__safe foreign handler fluid_player_add(in pPlayer as fs_PLAYER,in pFilename as ZStringNative) returns CBool binds to "c:libfluidsynth>fluid_player_add"
__safe foreign handler fluid_player_play(in pPlayer as fs_PLAYER) returns CBool binds to "c:libfluidsynth>fluid_player_play"
__safe foreign handler fluid_player_stop(in pPlayer as fs_PLAYER) returns CBool binds to "c:libfluidsynth>fluid_player_stop"
__safe foreign handler fluid_player_set_bpm(in pPlayer as fs_PLAYER,in pBPM as CInt) returns CBool binds to "c:libfluidsynth>fluid_player_set_bpm"
__safe foreign handler fluid_player_set_midi_tempo(in pPlayer as fs_PLAYER,in pMicroSecsPerQrtrNote as CInt) returns CBool binds to "c:libfluidsynth>fluid_player_set_midi_tempo" -- per MIDI file spec so 500000 = 120 BPM
__safe foreign handler fluid_player_get_status(in pPlayer as fs_PLAYER) returns CInt binds to "c:libfluidsynth>fluid_player_get_status"

public handler fsEnsureInitialize() returns optional any
	if mInited then
		return mInited
	end if
	variable rMaj as Integer
	variable rMin as Integer
	variable rMicr as Integer
	fluid_version(rMaj,rMin,rMicr)
	log "FluidSynth Version:"
	log [rMaj,rMin,rMicr]

	-- put new_mac_fluid_settings() into mSettings
   put new_fluid_settings() into mSettings
   put new_fluid_synth(mSettings) into mSynth
	-- put new_mac_fluid_synth(mSettings) into mSynth
	-- put "F: ... /sf2/example.sf2" into tFilename
	-- fluid_synth_sfcount(mSynth)
	put new_fluid_audio_driver(mSettings,mSynth) into mAudioDriver
	-- put new_mac_fluid_audio_driver(mSettings,mSynth) into mAudioDriver
	put true into mInited
end handler

public handler fsLoadSoundFont(in pFilename as String) returns Integer
	if fsEnsureInitialize() then
		-- put true into mInited -- redundant
		return fluid_synth_sfload(mSynth,pFilename,true)
	else
		return false
	end if
end handler

public handler fsMIDIPlayerInit() returns optional any
	if mPlayer is nothing then
		if fsEnsureInitialize() then
			put new_fluid_player(mSynth) into mPlayer
		end if
	end if
end handler

public handler fsLoadMIDIFile(in pFilename as String) returns optional any
	if fsEnsureInitialize() then
		if fluid_is_midifile(pFilename) then
			-- put new_fluid_player(mSynth) into mPlayer
			fluid_player_add(mPlayer,pFilename)
			-- fluid_player_play(mPlayer)
			return true
		else
			return false
		end if
	else
		return false
	end if
end handler

public handler fsMIDIPlayerStop()
	if mPlayer is not nothing then
		fluid_player_stop(mPlayer)
		delete_fluid_player(mPLayer)
		put nothing into mPLayer
	end if
end handler

public handler fsMIDIPlayerPause()
	if mPlayer is not nothing then
		fluid_player_stop(mPlayer)
	end if
end handler

public handler fsMIDIPlayerPlay()
	if mPlayer is not nothing then
		fluid_player_play(mPlayer)
	end if
end handler

public handler fsMIDIPlayerStatus() returns optional any
	variable tStatus as Number
	if mPlayer is not nothing then
		put fluid_player_get_status(mPlayer) into tStatus
		if tStatus is 1 then
			return "playing"
		else if tStatus is 2 then
			return "play stopped"
		else
			return tStatus
		end if
	else
		return "no player"
	end if
end handler

public handler fsSetTempoMillisecsPerQuarterNote(in pTempoMillsecs as optional Integer)
	if pTempoMillsecs is nothing then
		put 500000 into pTempoMillsecs --- 500000 = 120 BPM
	end if
	return fluid_player_set_midi_tempo(mPLayer,pTempoMillsecs)
end handler

public handler fsSetTempoBPM(in pBPM as optional Integer)
	if pBPM is nothing then
		put 120 into pBPM
	end if
	fluid_player_set_bpm(mPLayer,pBPM)
end handler

public handler fsSystemReset()
	fluid_synth_system_reset(mSynth)
end handler

public handler fsSetGain(in pGain as optional Number) returns optional any
	if pGain is nothing then
		put 0.5 into pGain
	end if
	return fluid_settings_setnum(mSettings,"synth.gain",pGain)
end handler

public handler fsGetGain() returns optional any
	variable rGain as Number
	variable tSettingDoesNotExist as Boolean
	put fluid_settings_getnum(mSettings,"synth.gain",rGain) into tSettingDoesNotExist
	if not tSettingDoesNotExist then
		return rGain
	else
		return "Gain Setting does not exist"
	end if
end handler

public handler fsNoteOn(in pChannel as Integer, in pKey as Integer, in pVel as Integer)
	fluid_synth_noteon(mSynth,pChannel,pKey,pVel)
end handler

public handler fsNoteOff(in pChannel as Integer, in pKey as Integer)
	fluid_synth_noteoff(mSynth,pChannel,pKey)
end handler

public handler fsPitchBend(in pChannel as Integer, in pBend as Integer)
	fluid_synth_pitch_bend(mSynth,pChannel,pBend)
end handler

public handler fsProgramChange(in pChannel as Integer, in pProgramNum as Integer)
	fluid_synth_program_change(mSynth,pChannel,pProgramNum)
end handler

public handler fsStopDriver()
	if mPLayer is not nothing then
		delete_fluid_player(mPLayer)
		put nothing into mPLayer
	end if
	if mAudioDriver is not nothing then
		delete_fluid_audio_driver(mAudioDriver)
		put nothing into mAudioDriver
	end if
	-- if mSynth is not nothing then
	--	delete_fluid_synth(mSynth)
	put nothing into mSynth
	-- end if
	put nothing into mSettings
	put false into mInited
end handler

end library
